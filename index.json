{
  "articles/citrus_project/configuration.html": {
    "href": "articles/citrus_project/configuration.html",
    "title": "Citrus project configuration | Citrus Engine",
    "keywords": "Citrus project configuration Citrus project configuration is provided via a JSON (currently Newtonsoft.Json parseable) file with extension .citproj . ProjectDirectory is considered to be a directory where project configuration file is located. Whenever it is stated that path is relative, implied it's relative to ProjectDirectory unless stated otherwise. Root level Property Type Description Name string Project name. Orange expects it to appear in directory structure as described. AssetsDirectory string can be used to override default Assets Directory ./Data/ GeneratedScenesPath string Path for scene code generated by Kumqat. Default is GeneratedScenes DontSynchronizeProject bool Used to disable project synchronization which is enabled by default. DictionariesPath string Path to dictionaries directory relative to assets directory. Default is Lime.Localization.DictionariesPath = \"Localization\" . UnresolvedAssembliesDirectory string default: $\"{ProjectName}.OrangePlugin/bin/$(CONFIGURATION)/\" GeneratedDeserializerPath string Path to save yuzu generated binary deserializers for application types if used. CitrusDirectory string relative path to Citrus engine directory. Default is ./Citrus/ . Should be set if path deviates from the default. SkipAssetsCooking bool Option to omit assets cooking. SkipCodeCooking bool Option to omit Kumquat code generation. Should be set to true if project doesn't use Kumquat. RawAssetExtensions string Space separated extensions for files to be treated as raw assets in form .xxx .yyy .zzz... LocalizeOnlyTaggedSceneTexts string TODO AddContextToLocalizedDictionary bool TODO Targets List< Target > Lists user defined targets. XCodeProject XCodeProject Setting specific to XCodePproject generation. PluginAssemblies PluginAssemblies Describes which assemblies should be loaded by Orange/Tangerine. AssetCache AssetCache Asset Cache settings RemoteScripting Dictionary<string, RemoteScripting > TODO ResolutionSettings ResolutionSettings TODO ApplyAnimationBlenderInTangerine bool Allows you to enable BlendAnimationEngine in Tangerine which is turned off by default Target Default target names are iOS , Android , Win , Mac . Property Type Description CleanBeforeBuild bool if Clean step should be invoked before building the project Name string Target name will be diaplayed in Orange and Tangerine interface. Configuration string Configuration to build in terms of VS projects. Default targets have it set to Release Project string relative path to VS .csproj or .sln file BaseTarget string name of target to inherit. Hidden bool Hides target from menu. If any property but Name and BaseTarget is not specified or set to null it will be inherited from specified BaseTarget . Project , Configuration and BaseTarget properties may contain Substitute tokens . XCodeProject Property Type Description DataFolder TODO Resources TODO AssetCache : Property Type Description ServerAddress string address of the FTP server ServerUsername string username to use when connect to server ServerPath string TODO PluginAssemblies Property Type Description OrangeAndTangerine List<string> paths to assemblies to be loaded by Tangerine and Orange Orange List<string> paths to assemblies to be loaded by Orange only Tangerine List<string> paths to assemblies to be loaded by Tangerine only OrangeAndTangerineBuildTargets List<string> list of Target to build when opening project with Tangerine and Orange OrangeBuildTargets List<string> list of Target to build when opening project with Orange TangerineBuildTargets List<string> list of Target to build when opening project with Tangerine Assembly paths may contain Substitute tokens . Assembly paths are relative to project directory. ResolutionSettings Property Type Description IsLandscapeDefault bool default: true TODO Resolutions List< Resolution > list of resolutions TODO Markers List< Marker > list of markers TODO Resolution Property Type Description Name string resolution name Width number width Height number height ResolutionMarkers List<string> TODO Marker Property Type Description Name string TODO LandscapeMarker string TODO PortraitMarker string TODO RemoteScripting Property Type Description ScriptsPath string TODO ScriptsAssemblyName string TODO BuildTarget string TODO FrameworkReferencesPath string TODO ProjectReferencesPath string TODO ProjectReferences List<string> TODO FrameworkReferences string TODO EntryPointsClass string TODO RemoteStoragePath string TODO Substitute tokens $(PLATFORM) => Win or Mac $(CONFIGURATION) => Debug or Release $(HOST_APPLICATION) => Orange or Tangerine"
  },
  "articles/citrus_project/cooking_rules.html": {
    "href": "articles/citrus_project/cooking_rules.html",
    "title": "Cooking rules | Citrus Engine",
    "keywords": "Cooking rules Asset cooking options are set and propagated using cooking rules files. Cooking rules files could be named in two ways: #CookingRules.txt <asset_filename_with_extension>.txt e.g. illuminator.png.txt In first case cooking rules are applied to all files and directories in current directory recursively until overridden with another cooking rules. In second case cooking rules are only applied to specified asset file. Cooking rules only override concrete rule lines specified. Format grammar: rule_list: one of rule '\\n' rule_list rule rule: rule_name ['(' target_name ')'] ' ' rule_value '\\n' target_name: one of 'Win' 'Mac' 'iOS' 'Android' <user_defined_in_citproj_file> rule_name: one of 'TextureAtlas' 'MipMaps' 'HighQualityCompression' 'PVRFormat' 'DDSFormat' 'Bundles' 'Ignore' 'ADPCMLimit' 'TextureScaleFactor' 'AtlasOptimization' 'AtlasPacker' 'ModelCompression' 'CustomRule' 'WrapMode' 'MinFilter' 'MagFilter' 'AtlasItemPadding' 'MaxAtlasSize' e.g.: Rule1(Target1) Value Rule2(Target1) Value Rule2(Target1) Value Rule3 Value ... Rule1(Target2) Value Rule10 Value ... There's a list of default targets, which are Win, Mac, iOS and Android. Other targets are listed in .citproj project file. Rules 'TextureAtlas' 'MipMaps' 'HighQualityCompression' 'PVRFormat' 'DDSFormat' 'Bundles' 'Ignore' 'ADPCMLimit' 'TextureScaleFactor' 'AtlasOptimization' 'AtlasPacker' 'ModelCompression' 'CustomRule' 'WrapMode' 'MinFilter' 'MagFilter' 'AtlasItemPadding' 'MaxAtlasSize' rule values description DDSFormat DXTi DXTi ARGB8 , RGBA8 Uncompressed PVRFormat PVRTC4 Falls back to PVRTC2 if image has no alpha PVRTC4_Forced PVRTC2 RGBA4 RGB565 ARGB8 RGBA8 AtlasOptimization Memory Default; best pack rate heuristics DrawCalls try to fit as many items to atlas as possible ModelCompression Deflate LZMA TextureAtlas None ${DirectoryName} atlas name will be the same as directory name <atlas_name> user defined atlas MipMaps Yes or No doesn't work HighQualityCompression Yes or No Bundles <default> , data main bundle <bundle_name> user defined bundle name; it's possible to specify multiple bundles; it's possible to include directory name e.g. Bundles/Restaurant Ignore Yes , No if set to Yes applicable assets won't make it to bundle Only Yes , No Asset will make it into bundle only if selected target has this rule set to Yes or there is no other target that has Only set to Yes ADPCMLimit int TextureScaleFactor float designed to be texture size multiplier. however if it's not 1.0f texture size multiplied by 0.75 with a mix of some logic. see code for detail. AtlasPacker string custom packer defined via plugin CustomRule string any string WrapMode Clamp texture wrap mode, default is Clamp Repeat MirroredRepeat MinFilter Linear texture min filter, default is Linear Nearest MagFilter Linear texture mag filter, default is Linear Nearest AtlasItemPadding int Pixel border width around atlas item. Default value is 1 . e.g. when it's 1 there'll be at least 2 pixels between items. MaxAtlasSize int Max size of texture atlas. Default value is 2048 ."
  },
  "articles/citrus_project/directory_structure.html": {
    "href": "articles/citrus_project/directory_structure.html",
    "title": "Citrus project directory structure | Citrus Engine",
    "keywords": "Citrus project directory structure ./<ProjectName>.citproj project configuration ./Data/ default assets directory /Localization/ default dictionaries path /Fonts/ fixed path for fonts ./<ProjectName>.Android/ <ProjectName>.Android.csproj <ProjectName>.Android.sln ./<ProjectName>.Game/ <ProjectName>.Game.projitems <ProjectName>.Game.shproj ./<ProjectName>.GeneratedScenes/ <ProjectName>.GeneratedScenes.Android.csproj <ProjectName>.GeneratedScenes.iOS.csproj <ProjectName>.GeneratedScenes.Mac.csproj <ProjectName>.GeneratedScenes.Win.csproj ./<ProjectName>.iOS/ <ProjectName>.iOS.csproj <ProjectName>.iOS.sln ./<ProjectName>.Mac/ <ProjectName>.Mac.csproj <ProjectName>.Mac.sln ./<ProjectName>.Win/ <ProjectName>.Win.csproj <ProjectName>.Win.sln"
  },
  "articles/citrus_project/tangerine_font_configuration.html": {
    "href": "articles/citrus_project/tangerine_font_configuration.html",
    "title": "Tangerine font configuration | Citrus Engine",
    "keywords": "Tangerine font configuration Tangerine Font Configuration (tftconf) is an asset describing how to create Tangerine Font asset (tft). The format is JSON: Property Type Description Height float Font's point size that will be used to generate the font's texture. Padding int Characters in the font texture need some padding between them so they can be rendered separately. This padding is specified in pixels.Padding also creates room for the SDF gradient. The larger the padding, the smoother the transition, which allows for higher-quality rendering and larger effects, like thicker outlines. CharSets CharSet That's the main part of configuration file that describes what font files and symbols should be used for Tangerine Font creation. ExcludeChars string Characters that will be ignored during the font generation step. IsSdf bool If it's true Signed Distance Font (SDF) will be generated otherwise simple bitmap font. SdfScale float When using an SFD font, a higher resolution results in finer gradients, which produces higher quality text. That's why it's a common way to sample characters at high resolution to create good gradients and then downscale. For example you can generated 8k textures with bigger font size and then downscale them to 4k with SdfScale = 0.5f . TextureSize Vector2 Size for each texture before downscale. CustomKerningPairs CustomKerningPairs Kerning pairs are used to adjust the spacing between specific character pairs, to produce a more visually pleasing result. Note that many fonts do not have kerning pairs or may not satisfy your needs so you can simply add your own pairs or override ones taken from the font file. Margin float Obsolete . Expands AC width. Was used for workarounds. CharSet Property Type Description Chars string A list of characters to be used for font generation. Can be null or empty (see ExtractFromDictionaries ). Font string Path (relative to asset directory) to font file from which glyphs will be taken. See supported font formats . ExtractFromDictionaries string A comma separated set of localizations (e.g. \"EN,RU,CN\"). If it's null or empty existing Chars are used, otherwise Chars are extracted from localization dictionaries (e.g. \"Dictionary.RU.txt\" or \"Dictionary.txt\" for EN). Vector2 array of two numbers (YuzuCompact). [12, 34] CustomKerningPairs It's a dictionary with character key and array of KerningPair values. Each kerning pair in array represents kerning amount that should be applied if character follows array's key of the dictionary. For example this: CustomKerningPairs: { 'A': [['V', -2]] } means that position of V should be decreased by 2 if it follows A . KerningPair Array of two elements: char and float (YuzuCompact). ['V', -3] Supported formats Supported font formats are those that are supported by FreeType: TrueType files (.ttf) and collections (.ttc) Type 1 font files both in ASCII (.pfa) or binary (.pfb) format Type 1 Multiple Master fonts Type 1 CID-keyed fonts OpenType/CFF (.otf) font CFF/Type 2 fonts Adobe CEF fonts (.cef), used to embed fonts in SVG documents with the Adobe SVG viewer plugin Windows FNT/FON bitmap fonts Apple's TrueType GX fonts are supported as normal TTFs (the advanced tables are ignored) How to generate font Place a font file inside Fonts directory (e.g. Digits.ttf) Place a configuration file inside Fonts directory. Example of .tftconf to generate SDF font with digits only: { \"CharSets\":[ { \"Chars\":\"0123456789\", \"Font\":\"Fonts/Digits.ttf\" } ], \"Height\":170, \"IsSdf\":true, \"SdfScale\": 0.25, \"Padding\":36, \"TextureSize\":[4096,4096] } Run Invalidate Fonts action via Orange or Tangerine (Orange -> Invalidate Fonts) You'll be notified after engine finishes font generation. You should be able to see Digits.ttf and Digit.png files in Fonts directory Unfortunately you have to restart Tangerine for changes to take place :("
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Citrus Engine | Citrus Engine",
    "keywords": "Citrus Engine"
  },
  "articles/old/Android.html": {
    "href": "articles/old/Android.html",
    "title": "ПРИКРЕПЛЕНИЕ РЕСУРСОВ К ПРИЛОЖЕНИЮ | Citrus Engine",
    "keywords": "ПРИКРЕПЛЕНИЕ РЕСУРСОВ К ПРИЛОЖЕНИЮ В Xamarin.Android ресурсы приложения могут быть представлены 3 способами: AndroidAssets, AndroidResources и EmbeddedResources. Первые 2 способа нативны для платформы андроид, третий способ -- универсальный для любых .NET приложений. Отличие AndroidAssets от AndroidResources в том, что первый способ предполагает хранение сырых ресурсов, в то время как в AndroidResources могут включаться файлы только определенных типов и для них препроцессор генерит код для быстрого доступа. Оба этих способа нам не подходят так-как Data.Android нельзя положить в AndroidResources (препроцессор не знает что это), а если положить этот файл в AndroidAssets, то Xamarin.Android предоставляет только потоковый доступ к файлу (нельзя читать его с произвольной позиции). Ресурсы мы будем прикреплять методом EmbeddedResources. Однако, если положить Data.Android в главную сборку, то не работает оптимизация Fast assembly deployment (главная сборка игры будет включать XXX мегабайтный файл ресурсов и заливаться на устройство каждый раз при запуске приложения). Поэтому рекомендуется создать одельную сборку для ресурсов (скажем: Assets.Anroid) и в нее положить Data.Android. В результате ресурсы будут копироваться на устройство только после их пересборки. Резюме: Ресурсы нужно хранить в отдельной сборке (Assets.Android) методом EmbeddedResources. ПОДДЕРЖКА СЖАТЫХ ТЕКСТУР Как хорошо известно, Андроид поддерживает зоопарк стандартов сжатых текстур. Чтобы не создавать отдельный дистрибутив под каждый формат, Цитрус использует единственный поддерживаемый всеми формат - ETC1. К сожалению данный формат не поддерживает альфа-канал. Для решения этой проблемы существует несколько способов, описанных в статье: http://malideveloper.arm.com/develop-for-mali/sample-code/etcv1-texture-compression-and-alpha-channels/ В цитрусе мы реализуем способ №2 - для каждой текстуры с альфа каналом создается отдельная текстура с маской. КАК ИСПОЛЬЗОВАТЬ НАТИВНЫЕ БИБЛИОТЕКИ Руководство здесь: developer.xamarin.com/guides/android/advanced_topics/using_native_libraries/ Но вот кое-что авторы не доработали: если какая-либо сборка содержит нативную библиотеку, то на эту сборку обязана ссылаться главная сборка приложения. В противном случае вы будете долго разбираться: почему же моя нативная библиотека не попала в .apk? В частности главная сборка игры ОБЯЗАНА иметь ссылку на Lemon.Android.dll Если нативная библиотека использует JNI, то для того чтобы она была проинициализирована нужно вызвать: Java.Lang.JavaSystem.LoadLibrary(\"library\"); КАК ПЕРЕСОБИРАТЬ OPENAL OpenAL для андроида скачивается с http://repo.or.cz/w/openal-soft/android.git Чтобы OpenTK не падал нужно пропатчить модуль ALc.с. При возвращении из alcGetString() нужно делать поверку на NULL: return (value == NULL) ? \"\" : value; КАК ПОСТАВИТЬ ADB-ДРАЙВЕР ДЛЯ KINDLE FIRE PHONE Дравера качаются отсюда, а не из Android SDK Manager: https://s3.amazonaws.com/android-sdk-manager/redist/Fire_Phone.zip КАК ЗАЛЕПИТЬ ПРОБЛЕМУ \"JARTOXML ... Unsupported major.minor version 51.0\" Нужно установить Jdk1.7 http://download.oracle.com/otn-pub/java/jdk/7u71-b14/jdk-7u71-windows-i586.exe Затем в Program Files(x86)/Java, переименовать jdk.1.6.0_39 во что-то непотребное"
  },
  "articles/old/HowToMakeStandaloneBuildOnWin32.html": {
    "href": "articles/old/HowToMakeStandaloneBuildOnWin32.html",
    "title": "| Citrus Engine",
    "keywords": "Установить Cygwin с пакетом pkg-config и всеми пакетами mingw В папку [Your_Game].Win/bin/Release скопировать файл MakeBundleWin32.sh В файле MakeBundleWin32.sh отредактировать пути к Mono, имя игры и сборки Запустить в командной строке: bash MakeBundleWin32.sh"
  },
  "articles/old/Making XCode Project.html": {
    "href": "articles/old/Making XCode Project.html",
    "title": "| Citrus Engine",
    "keywords": "1.) Открыть файл *.citproj проекта и прописать в нём информацию, необходимую для сбора ресурсов XCode-проекта. Блок информации выглядит следующим образом (на примере проекта Game): XCodeProject: { DoSvnUpdate: false, DoSvnCommit: false, Resources: '*.dll *.exe *.png Game Data.iOS .monotouch-32 .monotouch-64', DataFolder: 'Game_XCode_Project_Data', Version: '6.55' } Следует обратить особое внимание на поля \"Resources\" и \"DataFolder\". В поле \"Resources\" указываются через пробел маски файлов и папок, которые на следующем шаге будут автоматически скопированы в папку проекта XCode. В примере, приведённом выше, маску \"Game\" нужно заменить на соответствующую названию проекта. Все остальные маски нужно оставить как есть, при необходимости можно добавить другие маски в целях копирования в XCode-проект других файлов. В поле \"DataFolder\" указывается каталог, в котором у нас будет создан XCode-проект. Этот каталог лучше создать в каталоге iOS-проекта игры. 2.) Запускаем Orange на Mac. Загружаем citproj-файл проекта в Citrus Project. Выбираем в Target platform режим iPhone/iPad. Внизу в выпадающем списке слева от кнопки \"Go\" выбираем пункт \"Update XCode Project\". Нажимаем кнопку \"Go\". Набираемся терпения и ждём. Убеждаемся по логу в консоли, что всё прошло нормально и все необходимые файлы успешно скопированы. В конце лога мы должны увидеть надпись \"Elapsed Time ...\" 3.) Открываем XCode. Заходим последовательно через меню в File --> New --> Project. Выбираем iOS -> Application -> Single View Application. В \"Product Name\" пишем название нашего проекта. Выбираем папку, куда будет сохранён наш XCode-проект. В качестве этой папки выбираем ранее созданную на первом шаге папку, находящуюся в папке iOS-проекта нашей игры. Нажимаем кнопку \"Create\". В дереве файлов созданного XCode-проекта удаляем всё лишнее, кроме файлов \"Info.plist\" и \"*.app\" (* - название проекта). Каталоги, в которых лежат эти (\"Info.plist\" и \"*.app\") файлы, соответственно тоже не удаляем. 4.) Теперь нам осталось добавить в наш XCode-проект файлы нашей игры, которые подготовил Orange на втором шаге. Но здесь есть один важный момент. Библиотеки *.dll для нашей игры положились в папки \".monotouch-32\" и \".monotouch-64\". А для Мака папки, имя которых начинается с точки, считаются скрытыми и более того, оболочка XCode не разрешит в дерева проекта создавать папки с использованием символа точки в имени. Поэтому, нужно во-первых, сделать, чтобы Mac в Finder'е показывал скрытые файлы и папки. Для этого нужно выполнить следующие команды в консоли: defaults write com.apple.finder AppleShowAllFiles -bool YES killall Finder Перезапускаем Finder, заходим в каталог XCode-проекта и убеждаемся, что папки \".monotouch-32\" и \".monotouch-64\" стали видны. Далее, убираем точку в имени с обеих папок. Теперь в дереве файлов проекта в XCode вверху на названии проекта делаем правый клик и выбираем \"Add files to...\". Открываем в появившемя окошке папку с проектом XCode, выбираем все файлы и папки \"monotouch-32\" и \"monotouch-64\" (без точек, т.к. мы их переименовали), скопированные Orange на втором шаге и добавляем их в проект. Теперь сохраняем проект, закрываем XCode, идём в папку проекта, ставим обратно точки вначале имён папок \"monotouch-32\" и \"monotouch-64\". А теперь эти точки нужно также поставить в файле проекта XCode. Поскольку оболочка XCode не позволяет использовать точки в именах папок, то делать это прийдётся вручную и с помощью хорошего текстового редактора (стандартный TextEdit не пойдёт, он нарушает кодировку; нужен, например, Sublime Text). Скачиваем и устанавливаем Sublime Text, открываем xcodeproj путём правого клика и выбора пункта \"Show Package Contents\". Открываем через Sublime Text файл \"project.pbxproj\", ищем при помощи поиска ссылки на папки \"monotouch-32\" и \"monotouch-64\", ставим там точки в начале их имени. Сохраняем файл, выходим. Снова открываем проект в XCode. Запускаем. Всё."
  },
  "articles/old/SmoothAssetsLoading.html": {
    "href": "articles/old/SmoothAssetsLoading.html",
    "title": "| Citrus Engine",
    "keywords": "Плавная подгрузка ресурсов в цитрусе. Цитрус не требует каких-либо специальных действий для подгрузки текстур, звуков и прочих ресурсов. Однако, если во время игры потребуется загрузить какую либо тяжеловесную анимацию, то игра может подвиснуть и испортить игроку удовольствие, а игра потерять в рейтинге. Нахождение мест подгрузки \"тяжелых\" ресурсов осложняется тем фактом, что на iOS игра подвисает в тех местах, где на PC все гладко. Для выявления таких мест есть супер-метод: запуск игры с параметром \"--Jerky\". Если запустить игру с этим параметром, то цитрус начинает симулировать задержки при подгрузке ресурсов, причем в лог попадает список файлов с указанием времени загрузки (время рассчитывается пропорционально размеру файла). Хорошо: проблемные ресурсы обнаружены, что дальше? Дальше есть два способа избавится от задержек: Синхронная загрузка во время черного экрана на старте уровня Асинхронная загрузка если во время игры происходит резкая смена сеттинга (режим мини-игры, упавший с небес бонус и т.д.) Синхронная загрузка реализуется следующим паттерном: Создаются все тяжелые сцены. Если определенная сцена потребуется для неоднократного создания игровых объектов, можно использовать паттерн \"прототип\": Например: Класс Ninja содержит сцену NinjaRoot и статический прототип NinjaProto. NinjaProto подгружается в начале игры, и далее, когда нужно с него делается быстрая копия (Node.DeepCloneFast()) и сохраняется в NinjaRoot. Для сцен делается кеширующая подгрузка графики методом Node.Preload(). Этот метод пробегается по всем детям и подгружает всю требуемую графику. Те текстуры, на которые нет прямых ссылок из сцен, подгружаются методом: TexturePool.Instance.PreloadAll(pathPrefix) TexturePool.Instance.Preload(assetPath) Асинхронная загрузка. Итак к нам упал с неба бонус, нужно срочно подгрузить 5 мегов текстур и звуков. Как сделать плавно? А все очень просто, нужно использовать те же методы что и выше, только загрузку делать в параллельном потоке (создание сцен и подгрузка графики в Цитрусе потокобезопасно). Вот пример: private IEnumerator SpawnNinjaTask() { yield return BackgroundOperation.Run(PreloadNinja); // Теперь можно нашего ниндзю показать в игре var ninja = ninjaProto.DeepCloneFast (); ... } static void PreloadNinja() { if (ninjaProto == null) { ninjaProto = new Frame(\"Game/Bonuses/Ninja\"); } ninjaProto.Preload(); } Ну, а вызывать SpawnNinjaTask нужно из нашего замечательного CoolWorkflow. Со сценами и текстурами все ясно, а что насчет звуков? А со звуками все просто. Цитрусовый звуковой движок теперь ВСЕГДА подгружает звуки асинхронно. Для пользователя задержка перед воспроизведением звука (если он не был еще закэширован) в четверть секунды незаметна, зато игра больше не лагает. Все методы для контроля звука (Volume, Pan, Pitch) работают как и раньше, но перед Pause/Resume нужно проверить что звук действительно был загружен (Sound.Loaded == true). Что еще есть в цитрусе, связанное с многопоточностью? static void Application.InvokeOnMainThread(Action action); Этот метод выполняет действие в главном потоке, между апдейтом и рендерингом кадра. Если мы сейчас в главном потоке, действие выполняется немедленно. Этот метод особенно полезен на iOS, т.к. многие iOS-апишные колбэки вызываются не из главного потока. Что почитать? Погуглите про: System.ComponentModel.BackgroundWorker -- класс-обертка для выполнения операций в параллельном потоке; System.Collections.Concurrent -- набор thread-safe коллекций, которые появились в .NET 4.0."
  },
  "articles/productivity_tools/lookup/lookup.html": {
    "href": "articles/productivity_tools/lookup/lookup.html",
    "title": "Maximizing your efficiency in Tangerine — lookup | Citrus Engine",
    "keywords": "Maximizing your efficiency in Tangerine — lookup Lookup is a Tangerine feature that makes it simple to execute commands, open files and quick jump to nodes, components, animations, markers and frames. Instructions Use the default Ctrl+Shift+P/Cmd+Shift+P keyboard shortcut or File/Open Lookup Dialog command. For possible options type ? to open the Help Menu Go to Command by typing > Go to File by typing f: Type f: to find files in the current workspace. You can open scenes in a new tab or insert scenes, images and sounds to the current document. Go to Node by typing n: Go to Component by typing c: Go to Animation by typing a: or ad: Type a: to find animations of the current container or ad: to find animations in current document. Go to Marker by typing m: or md: Type m: to find markers in the current animation or md: to find markers in current document. Go to Frame by typing : Type : and the frame number to jump to the corresponding frame. Assign a keyboard shortcut to any Lookup function Go to the Keyboard shortcuts tab in the Preferences and assign a keyboard shortcut to any Lookup function (Lookup Commands, Lookup Files and etc) in Generic Commands section."
  },
  "articles/profiling/overdraw.html": {
    "href": "articles/profiling/overdraw.html",
    "title": "Overdraw | Citrus Engine",
    "keywords": "Overdraw With Overdraw mode you can determine the number of fragment shader calls for each pixel on the screen. ⚠ If objects are rendered to an intermediate buffer, and then this buffer is drawn to the main framebuffer, the Overdraw metric will be equal to 1 for the whole intermediate buffer. You can observe this effect at least for post-processing. Getting started Tangerine The Overdraw mode is configured through the profiler pane. You can enable this mode with Profiler pane or you can use scene command Toggle Overdraw Mode . You can set custom overdraw colors with gradient editor on Profiler pane. Code Use property Overdraw.Enabled in namespace Lime.Profiler.Graphics to enable overdraw visualization mode. It's disabled by default. To find out whether the Overdraw mode is currently enabled, use the Overdraw.EnabledAtUpdateThread and Overdraw.EnabledAtRenderThread for update and render threads respectively. Use Gradient property in OverdrawInterpreter class in namespace Lime.Profiler.Graphics to configure colors. Project level overdraw support To enable overdraw support in the engine, define PROFILER symbol at following projects: Lime Tangerine.UI.Profiler (only if you want to use overdraw in the scene editor) Tangerine.UI.SceneView (only if you want to use overdraw in the scene editor) The easiest way to do it: For Tangerine Overdraw mode is enabled by default. So you don't have to do anything For game use Lime project configuration Release.Profiler or Debug.Profiler ⚠ The profiler code inside Lime is enclosed in define guard. This is done to exclude a negative impact on the size of the executable files of the game. So if you are writing code that depends on the profiler code, you must surround it with define guard and you must also set PROFILER symbol in the properties of these projects. // define guard #if PROFILER // place your code here #endif // PROFILER Overdraw foreground UI To draw the interface on top of the overdraw, you need to add OverdrawForegroundComponent to a Widget. If overdraw mode is disabled, OverdrawForegroundComponent has no effect on rendering. If overdraw mode is enabled, objects are drawn with their original materials after all objects in the scene. ⚠ Objects do not change their transform, hierarchy position location. Only rendering order is changed. That means clickability of the widgets is being preserved. ⚠ OverdrawForegroundComponent affects all child nodes. How it works Scene rendering in overdraw mode is divided into three phases: Rendering the scene to a render texture Interpret results with a given gradient Draw objects with OverdrawForegroundComponent In the first phase, we redirect the rendering of all objects to a render texture. replace object shaders and blending. Overdraw shaders are created by replacing the body of the main function of the original fragment shaders: // Original fragment shader void main() { // shader code ... gl_FragColor = // shader code ... // shader code ... } // Overdraw fragment shader void main() { gl_FragColor = vec4(1 / 256, 0, 0, 1); } The vertex shader never changes. Also, every draw call of scene objects will use additive blending. As a result, we will get a render texture filled with shades of red. In the second phase, we apply a gradient to this render texture to make the individual overdraw states more distinguishable. There can be 256 overdraw states in total. And next, we draw the results on top of the scene. In the final third phase, we draw object subtrees that have OverdrawForegroundComponent at their root. For this, objects are added to a separate RenderChain. Objects are also added to the original scene RenderChain, but in this chain they will not be rendered! This is done for the hit test to work. Overdraw metrics You can also get an average number of redraws for all game (scene) pixels for a frame. Nodes with OverdrawForegroundComponent will not affect this metric. Set Overdraw.MetricRequired to true and subscribe to Overdraw.MetricCreated event. ⚠ Overdraw.MetricCreated(float averageOverdraw, int pixelCount) will be invoked from render thread. ⚠ Obtaining the metric is a very expensive operation. The higher your screen resolution, the worse the performance."
  },
  "articles/specifications/coding_conventions.html": {
    "href": "articles/specifications/coding_conventions.html",
    "title": "Именования | Citrus Engine",
    "keywords": "Именования Всегда : Используй CamelCase в названиях разныхПеременных, МетодовКлассов и т.д. Всегда : Используй заглавные буквы согласно договорённости: Сущность Написание Namespace С большой буквы Type (class, struct) С большой буквы Method (private, public) С большой буквы Property (private, protected, public) С большой буквы Event (private, protected, public) С большой буквы Delegate (private, protected, public) С большой буквы Field (private, protected) С маленькой буквы Field (public) С большой буквы Enum value С большой буквы Parameter С маленькой буквы Variable С маленькой буквы Constant (private, protected, public, in-code) С большой буквы Предпочтительно : Используй для bool такие названия, чтобы название представляло собой вопрос. Например: IsWidgetHidden , AreTasksComplete , CanPlayerExit . Нежелательно : Использовать Венгерскую нотацию или любой другой способ определения типа в идентификаторах. // Неправильно: int iCounter; string strName; // Правильно: int counter; string name; Никогда : Никогда не используй Screaming Caps // Неправильно: public static const string SHIPPINGTYPE = \"DropShip\"; // Правильно: public static const string ShippingType = \"DropShip\"; Нежелательно : Использовать сокращения, кроме общепринятых аббревиатур. Всегда : Капитализируй аббревиатуры так же, как и обычные слова в названиях. Исключение: аббревиатуры, состоящие из 2 букв // Правильные названия: public string Html; public object UI; private int id; Нежелательно : Использовать символ подчёркивания и другие неалфавитные символы // Неправильно: public DateTime client_Appointment; // Правильно: public DateTime clientAppointment; Никогда : Никогда не используй символ подчёркивания в начале имени // Неправильно: private DateTime _registrationDate; // Правильно: private DateTime registrationDate; Всегда : Начинай название интерфейса с буквы I // Правильно: public interface IShape { } Предпочтительно : Использовать названия файлов, соответствующие названию главного класса в них. Всегда : Синхронизируй структуру файлов и структуру неймспесов // ProjectFolder/Main.cs: namespace Project { class Main { ... } } // ProjectFolder/Module/ClassA.cs: namespace Project.Module { class ClassA { ... } } // ProjectFolder/Module/Submodule/ClassB.cs: namespace Project.Module.Submodule { class ClassB { ... } } Всегда : Используй названия в единственном числе для enum и в множественном числе для Flags public enum Color { Red, Green, Blue, } [Flags] public enum Dockings { None = 0, Top = 1, Right = 2, Bottom = 4, Left = 8, } Никогда : Никогда не используй обрезанные слова в названиях // Неправильно GetWin // Правильно: GetWindow Всегда : Используй следующие стандартные имена аргументов: Унарный оператор - value Equals-подобный метод - other Бинарный оператор - lhs , rhs Метод с N параметрами одинакового типа: value1 , value2 , ..., valueN Всегда : Называй ивенты следующим образом: Заканчивай название на -ing , если ивент вызывается до или во время главного действия. Заканчивай название на -ed , если ивент вызывается после главного действия. (имеется в виду past participle т.е. третья форма для irregular verbs) Заканчивай название метода на _EventName , если он присваивается ивенту с названием EventName . Называй метод OnEventName , если он вызывает ивент с названием EventName . class A { public delegate void UpdateDelegate(); public event UpdateDelegate Updating; public event UpdateDelegate Updated; private void Update() { OnUpdating(); // ... OnUpdated(); } private void OnUpdating() { Updating(); } private void OnUpdated() { Updated(); } } class MyWidget { private void Method() { a.Updating += MyWidget_Updating; a.Updated += MyWidget_Updated; } } Всегда : называй переменные означающие количество чего-либо в стиле <something>Count , где <something> в единственном числе. Всегда : называй переменные индекса как index или <something> Index, если это не сокращённая форма (i, j, k, etc) Предпочитительно : формируй имена переменных и методов в стиле естественных языков: // Правильно: var shortName = \"Leo\"; var fullName = \"Leonardo\"; // Неправильно: var nameFull = \"Donatello\"; var nameShort = \"Don\"; Всегда : добавляй к методу префикс try если выполняются следующие пункты: обязательно: метод возвращает bool обязательно: если от метода ожидается возвращемое значение, то оно получается через out обязательно: метод не бросит исключений. желательно: есть такой же метод без try , в случае неудачи бросающий исключение. Оформление комментариев Всегда : Пиши комментарии на английском языке. Предпочтительно : Располагать комментарий на предыдущей строке, а не в конце строки комментируемого кода. Всегда : Начинай комментарий с заглавной буквы и заканчивай точкой. Всегда : Вставляй пробел между символами комментария // и текстом комментария // Правильно: // The following declaration creates a query. It does not run // the query. Никогда : Никогда не создавай форматированные блоки звёздочек вокруг комментариев // Неправильно: //**************************** //* Very important comment * //**************************** // Правильно: // Very important comment Предпочтительно : Указывать автора в тексте комментари // Правильно: // Linus Torvalds: this method was not implemented // because it would take too much time. Всегда : Оставляй комментарий, если вкручиваешь костыль или реализуешь какую-то неочевидную логику. Никогда : Никогда не используй комментарии в блоках /**/ . Форматирование Всегда : Используй табуляцию вместо пробелов для отступов. Всегда : Используй пробелы вместо табуляции для выравнивания. Всегда : Используй вертикальное выравнивание скобочек вместо египетского выравнивания. Исключения: if циклы switch object and collection initializers lambda expressions Всегда : Вставляй пробелы между бинарными операторами и операндами. Всегда : Для однострочных лямбд, object and collection initializers отделяй внутреннюю часть от фигурных скобок одним пробелом. Всегда : Отделяй [] пробелом справа и не отделяй слева, в синтаксисе объявлений и инициализаций. // Правильно: int[] dogs = new int[] { 1, 2, 3 }; // Не правильно: int [] dogs = new int [] { 1, 2, 3 }; Предпочтительно : Использовать LINQ в виде цепочек методов, а не sql-подобные LINQ вызовы // Нежелательно: var names = from item in collection select item.Name; // Желательно: var names = collection .Select(item => item.Name); Всегда : Форматируй switch statement согласно следующим правилам: однострочные case допустимы, если тело case из одной строчки считая break вставляй отступ перед case если тело case обрамляется в фигурные скобки, то откывающая скобка должна быть расположена на одной строчке с case, а закрывающая на отдельной строчке, на уровне вложенности соответствующего case; break или return в таком случае должен оставаться внутри фигурных скобок Примеры правильного форматирования switch statement: public List<ChestBonusConfig> Config { get { switch (Kind) { case SlotKind.StarterPack: return The.Config.StarterPackContents; case SlotKind.ProductPack: return The.Config.GetProductPackConfig(Index); case SlotKind.CoinPack: case SlotKind.ButtonMore: return null; default: throw new ArgumentOutOfRangeException(); } } } private Widget GetBasicWidget() { switch (ParticlesLinkage) { case ParticlesLinkage.Parent: return ParentWidget; case ParticlesLinkage.Other: { var widget = ParentWidget; while (widget != null) { if (widget.Id == LinkageWidgetName) { return widget; } widget = widget.ParentWidget; } return null; } case ParticlesLinkage.Root: default: return (Parent != null) ? WidgetContext.Current.Root : null; } switch (type) { case SignatureType.BinaryUnordered: yd = new BinaryDeserializer { Options = defaultYuzuCommonOptions, BinaryOptions = new BinarySerializeOptions { Unordered = true }, }; break; case SignatureType.BinaryOrdered: yd = new BinaryDeserializer { Options = defaultYuzuCommonOptions, }; break; case SignatureType.Json: SkipBomIfPresent(ms); yd = new JsonDeserializer { JsonOptions = defaultYuzuJSONOptions, Options = defaultYuzuCommonOptions }; break; default: throw new System.Exception(\"Unexpected Case\"); } Всегда : Используй кодировку UTF-8. Расположение и структура кода Всегда : Пиши только одно выражение в строке // Неправильно: a = 5; b = \"kek\"; c = new Example(a, b); // Правильно: a = 5; b = \"kek\"; c = new Example(a, b); Всегда : Пиши только одно объявление в строке // Неправильно: int a, b; string c; char d; // Правильно: int a; int b; string c; char d; Нежелательно : Писать выражения на одной строке с if // Нежелательно: if (true) return; // Желательно: if (true){ return; } Предпочтительно : Оборачивать даже однострочные выражения в фигурные скобки // Нежелательно: if (true) return; // Желательно: if (true){ return; } Всегда : Добавляй одну пустую строку между объявлениями методов и свойств. Нежелательно : Писать строки длиннее 100 символов. Никогда : Никогда не пиши строк длиннее 120 символов. Всегда : Оставляй перенос на новую строку в конце файла. Всегда : Оставляй бинарный оператор на той же строке, что и первый операнд. // Неправильно: var a = someLongLongLongLongLongLongLongVariableName1 || someLongLongLongLongLongLongLongVariableName2; // Правильно: var a = someLongLongLongLongLongLongLongVariableName1 || someLongLongLongLongLongLongLongVariableName2; Всегда : Добавляй перенос строки между return и длинным выражением. // Неправильно: return someLongLongLongLongLongLongLongVariableName1 || someLongLongLongLongLongLongLongVariableName2; // Правильно: return someLongLongLongLongLongLongLongVariableName1 || someLongLongLongLongLongLongLongVariableName2; Всегда : Располагай длинные выражения отдельно от if и скобочек. // Неправильно: if (someLongLongLongLongLongLongLongVariableName1 || someLongLongLongLongLongLongLongVariableName2) { ... } // Правильно: if ( someLongLongLongLongLongLongLongVariableName1 || someLongLongLongLongLongLongLongVariableName2 ) { ... } Использование языка Всегда : Используй обобщённые названия типов вместо системных типов, таких как Int16 , Single , UInt64 и т.д. // Неправильно: String firstName; Int32 lastIndex; Boolean isSaved; // Правильно: string firstName; int lastIndex; bool isSaved; Всегда : Используй var для всех типов кроме простых. Нежелательно : Использовать var для простых типов. Всегда : Явно указывай модификатор доступа private . Нежелательно : Использовать директиву #region . Предпочтительно : Использовать авто-свойства (Auto-Implemented Properties) вместо public полей. Всегда : дополняй окончания блочных директив препроцессора комментарием, дублирующим выражение в первой директиве данного блока в той же строке. // Например #if ANDROID && BFG_LIB Lime.Application.DiscardOpenGLObjects(); #endif // ANDROID && BFG_LIB Желательно : Указывать имя параметра в месте вызова, если параметр типа bool // Например void Func(bool flag) {} Func(flag: true); Документация Предпочтительно : Использовать следующие тэги: <param> <see> <summary> Никогда : Никогда не используй тэг <see> в комментарии более одного раза."
  },
  "index.html": {
    "href": "index.html",
    "title": "Citrus Engine | Citrus Engine",
    "keywords": "Citrus Engine Engine articles API documentation generated from xmldoc in source code Tangerine (citrus asset editor) documentation"
  },
  "tangerine/3d_attachment.html": {
    "href": "tangerine/3d_attachment.html",
    "title": "Окно \"Model3D Attachment\" | Citrus Engine",
    "keywords": "Окно \"Model3D Attachment\" Панель \"Model3D Attachment используется для настройки Model3D. После редактирования настроек, они сохраняются рядом с моделью в файл вида <название модели>.Attachment.txt . Окно имеет несколько вкладок: General - основные настройки ScaleFactor - масштаб модели. Значение по-умолчанию - 1. Materials Remap - настройки материалов Remap Material - переназначить материал, используемый в модели по-умолчанию. Source materials - список материалов, идущих в комплекте с используемой моделью. Mesh Options - настройки мешей Node Id - идентификатор ноды Cull Mode - режим куллинга Opaque - непрозрачность вкл/выкл Hit Test Target - хитбокс вкл/выкл Animations Список анимаций по-умолчанию берется из модели. Также можно перегрузить уже существующие анимации или создать новые. Animation name - название анимации Source Animation - источник анимации Start Frame - стартовый фрейм анимации Last Frame - конечный фрейм анимации Blending - смешивание анимации Если название анимации отлично от Default - то будут использоваться перегруженные анимации, вместо встроенных. Node Removals - удаление ненужных нод из ассетов Node Id - идентификатор ноды Components - применение каких-либо компонентов Node Id - идентификатор ноды"
  },
  "tangerine/backups.html": {
    "href": "tangerine/backups.html",
    "title": "Окно \"Backups\" | Citrus Engine",
    "keywords": "Окно \"Backups\" Панель \"Backups\" используется для манипуляции с резервными копиями, созданными автоматически. Они сценозависимые и хранятся в %APPDATA% Резервные копии создаются через определенные промежутки времени и при каждом сохранении сцены вручную."
  },
  "tangerine/changelog.html": {
    "href": "tangerine/changelog.html",
    "title": "| Citrus Engine",
    "keywords": "Changelog 20.04.2009 - 25.04.2019 Ключи анимации альфа-канала в ParticleModifier были изменены на 0 30 60 CIT-1044 Добавлена возможность копировать компоненты CIT-1140 Добавлена возможность сбрасывать анимации на начальное положение при использовании Animation Mode CIT-1143 Переделан механизм загрузки .dll OrangePlugin CIT-1150 Теперь кости игнорируются при перетаскивании виджетов на таймлайне CIT-1157 Реализован интеллектуальный автоскролл в Orange CIT-1164 Отрефакторен AssetCoocker CIT-1165 Реализован сетевой кэш для сборки билдов в Orange CIT-1166 Реализован dual quaternion skinning для 3D моделей CIT-1170 При экспорте фрейма во внешнюю сцену его значения больше не экспортируются CIT-1180 Реализованы маркеры для локалей CIT-1192 Реализованы составные анимации (CompoundAnimations) Багфиксы: Исправлена проблема со \"съезжающими\" панелями в редакторе CIT-922 Исправлена проблема, при которой использоватся по-умолчанию первый словарь в списке CIT-1007 Исправлены неработающие ограничения для значений, введенных с помощью мыши CIT-1061 Исправлена ошибка, не позволяющая назначить DefaultLayout в Layouts CIT-1071 Исправлена проблема, когда при запуске нового проекта возникал черный экран CIT-1138 Исправлена ошибка, когда Frame Progression не отрисовывается поверх всех виджетов CIT-1167 Исправлена ошибка ObjectDisposedException \"Texture2D\" CIT-1174 Исправлена ошибка, при которой BounceZoneThickness в ScrollView ни на что не влиял CIT-1186 Changelog 19.03.2019 Реализован автоскролл в Orange CIT-1152 ContentsPath теперь проверяется на наличие внешней сцены CIT-1156 Widget.Input.RestrictScope заменены Widget.Enabled в Orange CIT-1160 Реворк реализации SDF-шрифтов (SDFCleanup) Багфиксы: Исправлена ошибка, при которой невозможно открыть файлы, в пути которых содержится больше одной точки CIT-1139 Changelog 1.03.2019 - 14.03.2019 Добавлена возможность настраивать плавность анимации через изинги (easings) Добавлена возможность очистить кэш, настройки и проч. прямо из редактора CIT-874 Убрана возможность сделать Undo после конвертации сцены CIT-1108 Реализован прогрессбар для Orange Launcher CIT-1144 Реализован кэш для файлов, сжатых алгоритмом DDS CIT-1146 Багфиксы: Исправлена ошибка, при которой не рендерились вложенные шрифты CIT-1120 Исправлена ошибка, при которой файлы со старшей датой изменения не перекукивались при сборке CIT-1127 Исправлена ошибка, при которой не обновлялись значения триггеров при выделении кейфрейма CIT-1130 Changelog 1.03.2019 Добавлена возможность сбрасывать значения свойств виджета кликом средней кнопки мыши CIT-846 Реализован кэш для файлов, сжатых алгоритмом ETC CIT-1122 Багфиксы: Исправлены проблемы с отображением меню CIT-736 Исправлен некорректный сброс значений пивота CIT-926 Исправлена ошибка, при которой бандл пересобирался при изменении регистра пути до файлов CIT-1109 Исправлена ошибка, при которой файлы, имеющие дату старше, чем в бандлах, не перекукивались CIT-1127 Changelog 26.02.2019 Добавлена возможность использовать Audio во Viewport3D CIT-1002 Добавлено отображение свойств в readonly CIT-1096 Переработана работа с кешом в режиме Animation Mode CIT-1121 Добавлена возможность обновить рабочий проект через Git напрямую через редактор CIT-1126 Багфиксы: Исправлена ошибка, при которой выбор SplinePoint3D блокировал ввод с клавиатуры CIT-754 Исправлено отображение кириллицы в окне вывода Orange CIT-916 Исправлено отображение иероглифов для различных языков в свойстве Text CIT-1015 Исправлена ошибка, приводящая к поломке сцен с Viewport3D при конвертации из .scene в .tan CIT-1082 Исправлена ошибка, приводящая к крашу при использовании унарных тегов CIT-1133 Changelog 22.02.2019 Багфиксы: Исправлена ошибка, не позволяющая скроллить вывод Orange CIT-220 Увеличена производительность при работе с Model3D CIT-974 Исправлена ошибка, не обновляющая значение триггеров при выборе фреймов CIT-1130 Changelog 20.02.2019 Переделан интерфейс работы с триггерами CIT-1062 , CIT-1112 Багфиксы: Исправлена ошибка, когда из параллельной анимации вызывались неиспользуемые триггеры CIT-1118 Исправлена ошибка, при которой вызов \"Update XCode Project\" пересобирал все доступные бандлы CIT-1125 Changelog 15.02.2019 Реализована возможность объединять меши с одинаковыми материалами в Model3D CIT-1115 Багфиксы: Исправлена ошибка, приводящая к крашу редактору при использовании некоторых мешей в .fbx CIT-1123 Исправлены другие мелкие ошибки и проблемы в производительности. Changelog 13.02.2019 Возвращена возможность таскать ключи анимации без клика на фрейме CIT-1119 Багфиксы: Исправлены ошибки и недоработки, связанные с работой Hierarchy CIT-866 , CIT-1008 Исправлены ошибки, связанные с LetterSpacing в RichText. Changelog 12.02.2019 Добавлена возможность рендерить анимацию в последовательность PNG-файлов CIT-1009 Доработан функционал Lock timeline cursor CIT-1110 Багфиксы: Исправлена ошибка, при которой настройки шейдеров/блендинга не наследовались в DistortionMesh CIT-1102 Changelog 11.02.2019 Lock widgets теперь блокирует виджет от редактирования CIT-1095 Добавлены аниматоры для NumericRange CIT-1114 Changelog 07.02.2019 Багфиксы: Исправлены проблемы, связанные с конвертацией .scene в .tan CIT-964 , CIT-1080 Исправлена ошибка, приводящая к остановке анимации при использовании Animation Mode CIT-1048 Changelog 06.02.2019 Добавлен выбор анимации по-умолчанию для 3d-моделей в 3DAttachment CIT-1099 Багфиксы: Исправлен краш при открытии Model3D в сцене через панель Hierarchy CIT-1100 В root-сцене убрана возможность менять Position CIT-1092 Changelog 05.02.2019 При использовании TiledImage выдаётся предупреждение, если задействованная текстура не имеет wrap mode: repeat CIT-779 Реализована возможность конвертировать виджет во внешнюю сцену через контекстное меню в списке таймлайна CIT-1049 Добавлена возможность игнорировать подгружающиеся типы в dropdown list CIT-1078 Добавлена возможность уменьшать список виджетов таймлайна в ширину CIT-1094 Добавлена возможность фиксировать каретку на таймлайне CIT-1097 Багфиксы: Исправлена ошибка, сбрасывающая значения альфа-канала при использовании инструмента \"пипетка\" CIT-1001 Исправлена ошибка, при которой виртуальная клавиатура перестается отвечать на ввод CIT-1057 Исправлено неправильное отображение кнопки удаления анимаций CIT-1058 Исправлена некорректная работа LetterSpacing у TextStyle CIT-1063 Исправлен краш при выборе ImageUsage -> Overlay в TextStyle CIT-1076 Исправлены различные краши при использовании Gradient Component CIT-1083 , CIT-1084 Цвета теперь корректно свапаются при перестановке точек местами в Gradient Component CIT-1085 Исправлен краш при выборе инструмента \"пипетка\" при отсутствии открытого проекта CIT-1088 Исправлена ошибка, позволяющая сбросить развёрнутое на весь экран окно до исходного размера CIT-1089 Исправлена ошибка, позволяющая отрисовывать несколько Animation Path одновременно при использовании параллельных анимаций CIT-1093 Changelog 04.02.2019 Реализовано визуальное отображение изменения виджета на определенном промежутке времени (Frame Progression) CIT-721 Changelog 22.01.2019 Багфиксы: Исправлена ошибка, приводящая к крашу при выборе списка из выпадающего списка листов CIT-1081 Changelog 11.01.2019 Багфиксы: Исправлена ошибка, позволяющая циклические зависимости между сценами CIT-835 Исправлена ошибка, делающая невозможным изменение цвета во множественном выделении CIT-1035 Исправлена ошибка, позволяющая заменить содержимое root-сцены CIT-1040 Исправлена ошибка, делающая невозможным обновление проекта XCode CIT-1055 Changelog 29.12.2018 При клике на надпись <many values> она автоматически убирается CIT-1021 Багфиксы: Исправлена ошибка, не позволяющая изменять значение Color у нескольких выбранных виджетов, если они имели различные значения данного параметра CIT-1022 Changelog 26.12.2018 Реализована возможность отображать предупреждения и ошибки прямо в панели Inspector CIT-1016 Багфиксы: Исправлена ошибка, позволяющая случайно зайти в контейнер при изменении значения в инспекторе CIT-783 Исправлена ошибка, приводящая к крашу, если введенное значение Color было больше 4 байт CIT-1034 Changelog 19.12.2018 Добавлен новый тип блендинга PremultipliedAlpha для корректной работы RenderTarget с прозрачностью CIT-971 Исправлена ошибка, приводящая к невозможности настроить видимость виджета после взаимодействия с Hierarchy CIT-973 Исправлена некорректная работа LetterSpacing в Text CIT-1014 Changelog 18.12.2018 Реализована возможность анимировать кастомные enum-поля CIT-995 Параметры Position, Size, и Rotation теперь по-умолчанию изменяются с шагом в 1 единицу CIT-582 Changelog 14.12.2018 Добавлена возможность свернуть список аниматоров виджета, выбрав один из аниматоров CIT-827 Реализована валидация текстовый полей окна Inspector CIT-932 Багфиксы: Исправлена ошибка, позволяющая переместить таймлайн кликом с зажатым Ctrl + Shift CIT-931 Исправлена ошибка при копировании аниматоров виджетов с расвёрнутым списком аниматоров CIT-933 Исправлена ошибка, ломающая сцену, если в ContentsPath Viewport3D вставить внешнюю сцену с отличным от Viewport3D root-сценой CIT-993 Changelog 12.12.2018 Исправлена ошибка, позволяющая удалять ключи анимаций глобально из всех анимаций CIT-996 Changelog 11.12.2018 Для кнопок в играх и редакторе теперь можно задавать доп. лимиты, где кнопка считается нажатой CIT-902 Реализована возможность использовать SDF-шрифты в RichText и SimpleText CIT-929 Багфиксы: Исправлена ошибка, приводящая к невозможности снять выделение с отдельного фрейма, используя Ctrl CIT-967 Changelog 07.12.2018 Исправлена ошибка, приводящая к нерабочим анимациям, если в Model3D Attachment название анимации выставлено в отличное от Default значение commit: a0d0a7cf79f490e8a2f3e5159634c5420d72aaa4 Changelog 06.12.2018 Исправлена ошибка, приводящая к необновляемым значениями в инспекторе CIT-973 Changelog 05.12.2018 Увеличена производительность редактора при работе со внешними сценами CIT-428 Внешние сцены больше не подгружаются, если не были изменены CIT-719 Добавлена возможность переназначать материал в Model3D Attachment CIT-912 Переделана вкладка \"Mesh Options\" в Model3D Attachment CIT-913 AlignmentPropertyEditor теперь используется для Alignment CIT-919 В объектах типa Bone (кости) теперь доступны параметры Index и BaseIndex (в readonly) CIT-975 Багфиксы: Исправлена ошибка, при которой открывался последний закрытый проект после перезапуска редактора CIT-839 Исправлена ошибка, приводящая к крашу при попытке дублирования ( Ctrl + D ) виджета ImageCombiner и свёрнутой папки (Folder) CIT-956 Исправлена ошибка, приводящая к неправильной работе Undo после удаления столбца CIT-968 Changelog 30.11.2018 Исправлено медленное удаление столбца на таймлайне (через Ctrl + W ) CIT-739 Исправлено поведение Resize, если положение пивота виджета было отлично от значений по-умолчанию CIT-800 При множественном выделении теперь отображается <many values> , если значения у свойств виджетов было разное CIT-884 В исключения валидатора FilesystemPropertyEditor добавлен символ \"-\" CIT-910 При смене виджета, если скролл оказался в недоступной зоне, он откатывается на последнюю доступную позицию CIT-920 Исправлена ошибка, не позволяющая сохранять текущий тип интерполяции на таймлайне при работе с кейфреймами CIT-935 RowCount и ColumnCount в Table Layout больше не могут быть отрицательными значениями CIT-945 Исправлена проблема, приводящая к ошибки в обновлении дерева Hierarchy CIT-957 Changelog 26.11.2018 Исправлена ошибка, приводящая к крашу, если была использована модель .fbx c частотой кадров 30 fps CIT-947 Changelog 22.11.2018 Исправлена ошибка в SplineGear, приводящая к неверному просчету анимации при использовании AlongPathOrientation CIT-905 Исправлена ошибка, позволяющая обходить валидацию имени виджетов через переименование в списке Timeline CIT-906 Исправлен краш при установке ключа анимации хоткеем при развернутом списке аниматоров CIT-918 Исправлена ошибка, приводящая к применению всех доступных анимаций родительского виджета к дочерним, когда этого не требовалось CIT-925 Changelog 15.11.2018 Теперь позиция скролла в Inspector сохраняется при выборе однотипного виджета CIT-882 Реализован проброс параметра tag в TaskList.AddLoop CIT-904 Багфиксы: Исправлена ошибка, позволяющая создать виджет с отрицательными значениями параметра Size CIT-896 Исправлена ошибка, не позволяющая возвращать исходные значения параметра (после Undo), если они были изменены через Paste Keyframes CIT-903 Changelog 14.11.2018 Добавлена документация по редактору. Теперь узнать информацию по Tangerine можно, вызвав Help -> View Help Ctrl + F1 (на данный момент работает только на платформе Win) CIT-798 Багфиксы: Исправлена ошибка, создающая в дочерних виджетах лейаутов LayoutConstraints, если у виджета уже был добавлен кастомный компонент, наследуемый от класса LayoutConstraints CIT-752 Исправлена ошибка, приводящая к невозможности смены типа интерполяции у множественного выделения виджетов CIT-848 Исправлена регрессия, не позволяющая скроллить список виджетов таймлайна при перетаскивании виджетов CIT-881 Changelog (12.11.2018 - 13.11.2018) Разворачиваемые списки больше не сворачиваются при смене кадра CIT-764 Теперь по клику в любое доступное место можно снять фокус с текущего активного текстового/числового поля CIT-792 MFDecoder убран из движка в 3rdparty CIT-879 Changelog (01.11.2018 - 9.11.2018) Переработан интерфейс работы с Attachment3D. Теперь он вызывается как панель (View -> Panels -> Model3D Attachment) CIT-744 Добавлен выбор источника анимации при использовании Model3D. По-умолчанию теперь будут импортироваться все анимации из fbx модели (раньше импортировалась только одна). Следовательно, можно создавать разные анимации вместо размещения всех анимаций на одном таймлайне. В 3DAttachment можно явно указать, какую анимацию нужно перегрузить CIT-795 Багфиксы: Исправлена ошибка, позволяющая при анимировании поля Text создавать новые ключи анимации без Automatic Keyframes CIT-763 Исправлена ошибка, приводящая к крашу, если применить Fit to Container при выставленном ключе анимации Rotation CIT-786 Исправлена ошибка, приводящая к невозможности использовать стандартные операции (вставка/копирование/вырезание и т.п.) над аниматорами кастомных виджетов CIT-864 / CIT-887 Исправлена ошибка, приводившая к крашу при копировании виджета с анимированным Spacing в любом Layout CIT-886 Исправлена ошибка, приводивщая к пробрасыванию нажатия Enter в диалоге создания маркера CIT-891 Changelog (1.10.2018 - 1.11.2018) Ревамп внешнего вида редактора, изменен дизайн табов панелей и толщина сплиттеров между ними CIT-332 Была изменена логика работы с пивотами - теперь активный (выбранный) пивот всегда отображается поверх остальных, также добавлена цветовая индикация. CIT-810 Убрана задержка при драге виджетов (теперь она справедлива только для дублирования через Alt) CIT-819 Меню, которые невозможно использовать в данный момент, теперь остаются неактивными CIT-850 Начат переход к использованию параллельных анимаций. Подробная информация об этом и как это использовать будет позднее. Кратко: теперь есть возможность создавать несколько неймспейсов у корневых виджетов (контейнеров), в пределах этих неймспейсов будут свои ключи анимации и маркеры. Применятся они, соответственно, будут на дочерние контейнеру виджеты Исправлено множество ошибок и багов. В том числе устранена проблема с некорректной обработкой даблкликов и большинство проблем с инпутом Changelog (11.09.2018 - 1.10.2018) Теперь Orange Launcher регенерирует бинарные десериалайзеры Yuzu CIT-110 Добавлена обводка для маркеров на таймлайне CIT-713 Добавлена возможность работы с аниматорами на таймлайне CIT-720 Реализован ListPropertyEditor (редактор полей типа List ) CIT-750 Для текста теперь можно указать PathPropertyEditor CIT-765 Недостающие цвета в конфиге теперь берутся из текущей темы CIT-766 При запуске редактора неиспользуемые сцены не грузятся до их открытия CIT-790 Изменена индикация изменений на сцене CIT-796 Исправлено множество багов и недоработок Changelog (1.08.2018 - 11.09.2018) Добавлен пользовательский компонент Gradient CIT-102 Добавлен пользовательский компонент HSL CIT-650 Добавлен пользовательский компонент Layout - Stack, Table, Flow, Linear. layout branch report Добавлен фильтр элементов для Viewport (Visual Hints) CIT-246 Добавлена индикация связей костей/SplineGear с виджетами CIT-267 , CIT-612 Добавлена возможность раскрывать список аниматоров хоткеем ( Shift + Space ) CIT-274 Добавлена возможность выставить/убрать ключи анимации хоткеями (Position, Scale, Rotation - E/R/T ) CIT-280 , CIT-673 Добавлена возможность Copy/Paste в курсор мыши CIT-286 Добавлена возможность производить поиск по полю Text CIT-344 Добавлен общий заголовок для панелей CIT-349 Добавлена возможность конвертировать Frame в Button CIT-379 Переработана работа с цветовыми схемами в редакторе CIT-417 Добавлена поддержка арифметический операций в числовых полях CIT-431 Добавлена возможность смещать/масштабировать ключи анимации (Numeric Scale/Move Keys) CIT-450 Исправлено отображение мелких записей в интерфейсе CIT-466 Добавлена возможность центрировать экран на выбранном виджете/ноде (Center View) CIT-490 Превью виджетов по Tab теперь работает циклически CIT-495 Окна панелей теперь имеют класс ToolWindow CIT-496 Добавлен механизм проверки \"плохих\" путей файлов CIT-500 Переработана панель инструментов (теперь ее можно кастомизировать) CIT-501 Добавлена возможность быстрого масштабирования ключей анимации на таймлайне (растягиванием выделения) CIT-525 Переработана панель Filesystem с поддержкой адресной строки и навигации по клавишам (как в Windows Explorer) CIT-534 Добавлена возможность центрироваться на каретке по хоткею ( Ctrl + Shift + C ) CIT-539 Добавлено превью в Filesystem для .tan CIT-556 Ускорена работа с ключами анимации/маркерами на таймлайне CIT-557 Реализован новый виджет - TiledImage CIT-560 Добавлена возможность drag & drop для TiledImage CIT-625 Добавлена возможность выставить свой коэф. Zoom CIT-581 Добавлена возможность изменения рамок виджета без затрагивания его содержимого CIT-589 Реализован AlongPathOrientation для SplineGear CIT-607 Переработана панель Search - переименована в Hierarchy, реализовано в виде древовидной структуры CIT-619 Удалена возможность анимировать Root-cцену CIT-613 Добавлен режим Slowmotion (x0.10) для режима проигрывания анимации (F5) CIT-629 Реализован базовый функционал внутренней справки CIT-634 Переработан редактор текста для RichText/SimpleText CIT-641 Переработан внешний вид меню (добавлены иконки и сплиттеры) CIT-662 Unsample animation twice теперь работает только внутри контейнера CIT-663 Добавлена возможность выбрать все ключи анимации для текущей строки ( Ctrl + Shift + A ) и выбрать только ключи анимации выделением через Alt CIT-668 Выделение теперь сбрасывается по клику на выделенной области CIT-670 Изменен порядок интерполяций по-умолчанию (Linear → Spline → Steep → ClosedSpline) CIT-671 Добавлена возможность скрывать только выделенные виджеты на таймлайне (Shift + Show widgets) CIT-675 Реализована возможность добавить кастомные компоненты в Model3DAttachment CIT-697 Добавлена возможность изменять префикс во множественном выделении виджетов CIT-699 Реализована функция Timeshift для ParticleEmitter (аналогично HotStudio) CIT-708 Исправлено множество багов и недоработок Changelog (11.08.2018 - 1.10.2018) Теперь Orange Launcher регенерирует бинарные десериалайзеры Yuzu CIT-110 Добавлена обводка для маркеров на таймлайне CIT-713 Добавлена возможность работы с аниматорами на таймлайне CIT-720 Реализован ListPropertyEditor (редактор полей типа List ) CIT-750 Для текста теперь можно указать PathPropertyEditor CIT-765 Недостающие цвета в конфиге теперь берутся из текущей темы CIT-766 При запуске редактора неиспользуемые сцены не грузятся до их открытия CIT-790 Изменена индикация изменений на сцене CIT-796 Исправлено множество багов и недоработок"
  },
  "tangerine/components/animation_blender.html": {
    "href": "tangerine/components/animation_blender.html",
    "title": "Animation Blender | Citrus Engine",
    "keywords": "Animation Blender Animation Blender используется для плавного перехода анимаций между собой. Имеет следующие параметры: BlendDuration - продолжительность смешивания (в кадрах)"
  },
  "tangerine/components/components.html": {
    "href": "tangerine/components/components.html",
    "title": "Компоненты (Components) | Citrus Engine",
    "keywords": "Компоненты (Components) В редакторе есть возможность использовать дополнительные компоненты для виджетов. Они могут быть project specific, так и общими для всех проектов. Компоненты доступные по умолчанию: Система лэйаутов Animation Blender - смешение анимаций Post Processing Component - постэффекты HSL Component - Hue, Saturation, Lightness Gradient Component - градиент Добавить их можно в инспекторе, нажав на \"+\" в левом нижнем углу."
  },
  "tangerine/components/gradient.html": {
    "href": "tangerine/components/gradient.html",
    "title": "Gradient | Citrus Engine",
    "keywords": "Gradient Gradient используется для заливки виджетов градиентом. Имеет следующие параметры: Angle - угол наклона Blending - настройки блендинга (аналогично Widget) Gradient - настройка цвета градиента"
  },
  "tangerine/components/hsl.html": {
    "href": "tangerine/components/hsl.html",
    "title": "HSL | Citrus Engine",
    "keywords": "HSL HSL настраивает параметры тона, насыщенности и теплоты для определенного виджета (с текстурой). Имеет следующие параметры: Hue - настройка тона Saturation - настройка насыщенности Lightness - настройка теплоты"
  },
  "tangerine/components/layouts.html": {
    "href": "tangerine/components/layouts.html",
    "title": "Layouts | Citrus Engine",
    "keywords": "Layouts В редакторе есть возможность использовать несколько способов размещения виджетов (лэйаутов): Flow Layout - лэйаут, отображение элементов которой зависит от размера его элементов. Linear Layout - линейный лэйаут (отображение по вертикали/горизонтали). Stack Layout - лэйаут в виде списка, где элементы расположены слоями. Table Layout - лэйаут в виде таблицы. Также для лэйаутов используются следующие компоненты: Layout Cell - присваивается по-умолчанию каждому дочернему виджету, используемому в формировании лэйаута. Содержит в себе настройки особенности расположения виджета в ячейке. Layout Constraints - используется для задания минимальных/максимальных размеров виджета в ячейке. При применении любого компонента Layout на виджет, его дочерним виджетам всегда добавляется кастомный компонент Layout Constraints. Для всех Layout работают общие свойства: DefaultCell - настройки ячеек по-умолчанию. На данный момент там доступен один пункт - DefaultLayoutCell . IgnoreHidden - игнорировать настройки видимости дочерних виджетов. DefaultLayoutCell имеет следующие свойства: HorizontalAlignment - выравнивание по горизонтали. VerticalAlignment - выравнивание по вертикали. ColumnSpan - количество ячеек, объединенных по вертикали. RowSpan - количество ячеек, объединенных по горизонтали. Stretch - растягивание ячеек по горизонтали/вертикали Ignore - игнорировать все настройки Подробнее о каждом лэйауте: Flow Layout - лэйаут, в котором отображение виджетов зависит от размера: Для того, чтобы всё заработало, необходимо выставить MinSize в Layout Constraints, иначе никаких изменений не будет видно. Spacing - промежуток между ячейками. RowAligment - выравнивание строк. ColumnAligment - выравнивание столбцов. Direction - направление компоновки виджетов. Linear Layout - лэйаут, в котором виджеты выстраиваются в одну линию, по горизонтали/по вертикали: Spacing - промежуток между ячейками. Direction - направление компоновки виджетов. Stack Layout - лэйаут, в котором виджеты накладываются один на другой (наподобие слоёв): HorizontallySizeable - блокирует изменение размера внутри лэйаута по горизонтали. VerticallySizeable - блокирует изменение размера внутри лэйаута по вертикали. Table Layout - лэйаут, в котором виджеты выстраиваются в виде таблицы: RowCount - количество строк. ColumnCount - количество столбцов. ColumnSpacing - промежуток между столбцами. RowSpacing - промежуток между строками."
  },
  "tangerine/components/shaders.html": {
    "href": "tangerine/components/shaders.html",
    "title": "Shaders | Citrus Engine",
    "keywords": "Shaders"
  },
  "tangerine/console.html": {
    "href": "tangerine/console.html",
    "title": "Окно \"Console\" | Citrus Engine",
    "keywords": "Окно \"Console\" Панель \"Console\" используется для отображения служебной информации и предупреждений. Имеется возможность целиком скопировать лог по ПКМ на рабочей области панели."
  },
  "tangerine/custom_components.html": {
    "href": "tangerine/custom_components.html",
    "title": "Пользовательские компоненты (Components) | Citrus Engine",
    "keywords": "Пользовательские компоненты (Components) В редакторе есть возможность использовать пользовательские компоненты для виджетов. Они могут быть project specific, так и общими для всех проектов. Добавить их можно в инспекторе, нажав на \"+\" в левом нижнем углу."
  },
  "tangerine/filesystem.html": {
    "href": "tangerine/filesystem.html",
    "title": "Окно \"Filesystem\" | Citrus Engine",
    "keywords": "Окно \"Filesystem\" Панель \"Filesystem\" используется для навигации по файловой системе проекта. Она состоит из панели инструментов, списка файлов и адресной строки. Панель инструментов \"Filesystem\" содержит следующие элементы: Home - возвращение к корню проекта Up - возвращает на один уровень вверх Back - перемещает назад по истории посещений папок Forward - перемещает вперед по истории посещений папок Cooking Editor - показывает окно для настройки Cooking rules Preview - показывает доп. фрейм, где можно видеть превью файлов Add horizontal frame - создает доп. фрейм файлменеджера справа Add vertical frame - создает. доп. фрейм файлменеджера снизу Меню сортировки по имени/расширению/размеру/дате и изменение порядка сортировки файлов Список файлов в \"Filesystem\" работает аналогично Windows Explorer (поддерживаются те же сочетания клавиш) Адресная строка отображает текущий путь, кликом по ней или по сочетанию клавиш Ctrl + L она переходит в режим редактирования"
  },
  "tangerine/hierarchy.html": {
    "href": "tangerine/hierarchy.html",
    "title": "Окно \"Hierarchy\" | Citrus Engine",
    "keywords": "Окно \"Hierarchy\" Панель \"Hierarchy\" используется для навигации по сцене, используя иерархию в виде дерева. Также доступен поиск по дереву. Заматченные значения будут подсвечены желтым цветом. При переходе во внешнюю сцену, она откроется в своем окне и будет иметь своё дерево."
  },
  "tangerine/inspector.html": {
    "href": "tangerine/inspector.html",
    "title": "Окно \"Inspector\" | Citrus Engine",
    "keywords": "Окно \"Inspector\" Окно инспектора служит для отображения свойств выбранного виджета. Подробнее о свойствах каждого виджета можно узнать здесь Также инспектор содержит кнопку Inspect Root Node , которая отображает свойства root-сцены (чаще всего он имеет тип Frame )"
  },
  "tangerine/intro.html": {
    "href": "tangerine/intro.html",
    "title": "Tangerine Docs | Citrus Engine",
    "keywords": "Tangerine Docs Выберите раздел: Пользовательский интерфейс (UI) Настройки (Preferences) Пользовательские компоненты (Components)"
  },
  "tangerine/menu_bar/menu_bar.html": {
    "href": "tangerine/menu_bar/menu_bar.html",
    "title": "Панель меню (Menu bar) | Citrus Engine",
    "keywords": "Панель меню (Menu bar) Панель меню содержит в себе элементы: File - меню для работы со сценой, создание новых сцен, открытие/закрытие проектов, сохранение файлов. Edit - содержит команды для редактирования сцены, Undo/Redo, Copy/Paste, etc. Create - содержит список виджетов, которые мы может создать. Дублируется на панели инструментов. View - содержит настройки отображения сцены, настройку доп. окон, линеек, etc. Window - управление текущими вкладками (след./пред. вкладка). Orange - дублирует меню из Orange Launcher, пункты меню зависят от текущего проекта. Help - меню вызова справки/списка изменений."
  },
  "tangerine/menu_bar/menu_create.html": {
    "href": "tangerine/menu_bar/menu_create.html",
    "title": "Меню \"Create\" | Citrus Engine",
    "keywords": "Меню \"Create\" В меню \"Create\" содержатся все виджеты/ноды, доступные для создания в редакторе. Custom Nodes - подменю для создания пользовательских виджетов. Зависит от используемого в данный момент проекта. Frame Button Audio Movie Bone ParticleEmitter ParticleModifier EmitterShapePoint ParticlesMagnet SimpleText RichText TextStyle NineGrid DistortionMesh Spline SplinePoint SplineGear Slider ImageCombiner Viewport3D Camera3D Model3D Node3D WidgetAdapter3D Spline3D SplinePoint3D SplineGear3D Polyline PolylinePoint TiledImage"
  },
  "tangerine/menu_bar/menu_edit.html": {
    "href": "tangerine/menu_bar/menu_edit.html",
    "title": "Меню \"Edit\" | Citrus Engine",
    "keywords": "Меню \"Edit\" Undo Ctrl + Z - отменяет последнее действие Redo Ctrl + Shift + Z - возвращает отмененное действие Cut Ctrl + X - вырезает выделенный виджет Copy Ctrl + C - копирует выделенный виджет Paste Ctrl + V - вставляет скопированный/вырезанный виджет Delete Del - удаляет выделенный виджет Duplicate Ctrl + D - делает копию выделенного виджета Delete Selected Keyframes Shift + Del - удаляет выбранные кадры с таймлайна Create Play Marker Alt + 1 - создать Play маркер на таймлайне (зеленый) Create Stop Marker Alt + 2 - создать Stop маркер на таймлайне (красный) Create Jump Marker Alt + 3 - создать Jump маркер на таймлайне (желтый) Delete Marker Alt + 4 - удалить маркер с таймлайна Select All Ctrl + A - выбрать все виджеты в окне Viewport Group Ctrl + G - сгруппировать виджеты в группу (все выбранные виджеты будут находиться внутри Frame) Ungroup Ctrl + Shift + G - разгруппировать группу Insert Timeline Column Ctrl + Q - вставить колонку на таймлайне Remove Timeline Column Ctrl + W - удалить колонку на таймлайне Tie Node with Bones Ctrl + T - связать виджеты с костями Untie Node from Bones Ctrl + Shift + T - отвязать виджеты от костей Group Contents to Morphable Meshes Ctrl + M - ??? Export Scene - экспортировать сцену в *.tan Upsample Animation Twice - растягивает анимации в 2 раза, работает только внутри контейнера (виджета) Convert to Button - преобразует Frame в Button Generate Preview - сгенерировать превью для отображения в Filesystem"
  },
  "tangerine/menu_bar/menu_file.html": {
    "href": "tangerine/menu_bar/menu_file.html",
    "title": "Меню \"File\" | Citrus Engine",
    "keywords": "Меню \"File\" New Ctrl + N - создает новый файл. Можно выбрать *.tan, *.scene или *.tan с кастомной рут-сценой New Project Ctrl + J - cоздает новый проект Open Ctrl + O - открыть сцену (*.scene / *.tan) Open Project Ctrl + Shift + O - открыть проект Close Project Alt + Q - закрыть проект Recent Documents - отображает список 5 последних открытых документов в пределах текущего проекта Recent Projects - отображает список 5 последних открытых проектов Save Ctrl + S - сохраняет текущий документ Save As Ctrl + Shift + S - сохраняет текущий документ с изменением имени Save All - сохранить все открытые документы Revert Ctrl + R - откатить все изменения, сделанные в сцене (документе) Upgrade Document Format (.tan) - перевести формат *.scene в *.tan Preferences Ctrl + P - открывает окно настроек редактора Close - закрыть текущий документ Сlose All - закрыть все открытые документы Close All but Current - закрыть все, кроме текущего документа Quit Alt + F4 - выйти из редактора"
  },
  "tangerine/menu_bar/menu_help.html": {
    "href": "tangerine/menu_bar/menu_help.html",
    "title": "Меню \"Help\" | Citrus Engine",
    "keywords": "Меню \"Help\" View Help Ctrl + F1 - показать справку Help Mode F1 - режим отображения справки по выбранной ноде View Changelog - показать список изменений (changelog)"
  },
  "tangerine/menu_bar/menu_orange.html": {
    "href": "tangerine/menu_bar/menu_orange.html",
    "title": "Меню \"Window\" | Citrus Engine",
    "keywords": "Меню \"Window\" Меню \"подтягивается\" из Orange Launcher (и зависит от Orange Plugins), однако следующие функции встроенны в редактор: Build and Run F9 - собрать и запустить проект Run Config Ctrl + F9 - запустить конфиг проекта Cook Game Assets Alt + F9 - подготовить ресурсы для проекта (прокукать)"
  },
  "tangerine/menu_bar/menu_view.html": {
    "href": "tangerine/menu_bar/menu_view.html",
    "title": "Меню \"View\" | Citrus Engine",
    "keywords": "Меню \"View\" Layouts - работа с лейаутами интерфейса редактора Save layoyt - сохранить текущий лейаутами Load layout - загрузить заранее сохранённый лейаутами Default layout - сбросить на лейаут по-умолчанию Pads - настройка панелей (допол. окон) редактора Timeline - вкл./выкл. отображение таймлайна Inspector - вкл./выкл. отображения инспектора Hierarchy - вкл./выкл. отображение дерева виджетов Filesystem - вкл./выкл. отображение файлменеджера Console - вкл./выкл. отображение консоли (вывода) Backups - вкл./выкл. отображение списка бекапов Visual Hints - вкл./выкл. фильтр пивотов Resolution - выставляет разрешение root-сцены под соответствующий девайс Overlays - отобразить разрешения для различных девайсов Rulers - управление линейками Toggle Display - вкл./выкл. отображение линеек Clear Active Ruler - удалить выделенную линейку Save Ruler - сохранить выделенную линейку Manage Rulers - управлять сохраненными линейками Snap Widget to Ruler - вкл./выкл. привязку виджета к линейке Snap Widget Pivot to Ruler - вкл./выкл. привязку пивота виджета к линейке Snap Ruler Lines to Node - вкл./выкл. привязку линеек к виджетам Preview Next/Previous Resolution F11 `Shift + F11`- включить превью с разрешениями экрана для различных девайсов Preview Next Orientation F12 - переключить превью со сменой ориентации для данного разрешения девайса Center Timeline on Current Column Ctrl + Shift + C - центрировать таймлайн на каретке Localization - ???"
  },
  "tangerine/menu_bar/menu_window.html": {
    "href": "tangerine/menu_bar/menu_window.html",
    "title": "Меню \"Window\" | Citrus Engine",
    "keywords": "Меню \"Window\" Next Document Ctrl + Tab - следующая вкладка на Viewport Previous Document Ctrl + Shift + Tab - предыдущая вкладка на Viewport"
  },
  "tangerine/node/3d/camera_3d.html": {
    "href": "tangerine/node/3d/camera_3d.html",
    "title": "Camera3D | Citrus Engine",
    "keywords": "Camera3D Camera3D - камера для использования в 3D-сценах Свойства Camera3D : Является Node3D FieldOfView - настройка поля зрения AspectRatio - соотношение сторон NearClipPlane - настройка видимости ближнего расстояния FarClipPlane - настройка видимости дальнего расстояния OrthographicSize - размер камеры в ортогональном режиме ProjectionMode - выбор типа проекции камеры (ортогональная или перспективная)"
  },
  "tangerine/node/3d/model_3d.html": {
    "href": "tangerine/node/3d/model_3d.html",
    "title": "Model3D | Citrus Engine",
    "keywords": "Model3D Model3D - контейнер для вставки 3D-моделей в сцены Свойства Model3D : Является Node3D"
  },
  "tangerine/node/3d/node_3d.html": {
    "href": "tangerine/node/3d/node_3d.html",
    "title": "Node3D | Citrus Engine",
    "keywords": "Node3D Node3D - базовая нода, используемая в Viewport3D. Все остальные объекты, которые работают в пределах этого контейнера, наследуются от Node3D. Свойства Node3D : Visible - вкл/выкл признака видимости Scale - коэф. масштабирования (по Х/Y/Z) Rotation - вращение Position - координаты в пространстве Color - цвет Opaque - прозрачность"
  },
  "tangerine/node/3d/spline_3d/spline_3d.html": {
    "href": "tangerine/node/3d/spline_3d/spline_3d.html",
    "title": "Spline3D | Citrus Engine",
    "keywords": "Spline3D Spline3D - инструмент для рисования сплайнов в 3д-сценах. Контейнер, который содержит в себе SplinePoint3D Свойства Spline3D : Является Node3D Closed - признак замкнутости сплайна"
  },
  "tangerine/node/3d/spline_3d/spline_gear_3d.html": {
    "href": "tangerine/node/3d/spline_3d/spline_gear_3d.html",
    "title": "SplineGear3D | Citrus Engine",
    "keywords": "SplineGear3D SplineGear3D - инструмент для связывания Node3D (виджета) и сплайна. Используется для анимирования движения вдоль сплайна. Свойства SplineGear3D : Является Node3D Node - Id ноды Spline - Id сплайна SplineOffset - смещение вдоль сплайна"
  },
  "tangerine/node/3d/spline_3d/spline_point_3d.html": {
    "href": "tangerine/node/3d/spline_3d/spline_point_3d.html",
    "title": "SplinePoint3D | Citrus Engine",
    "keywords": "SplinePoint3D SplinePoint3D - точки сплайна в 3d (Spline3D) Свойства SplinePoint3D : Свойства похожи на свойства SplinePoint, только в трёх измерениях Является Node3D Position - координаты точки TangentA - координаты касательной A TangentB - координаты касательной B Interpolation - выбор типа интерполяции (безье/линейная)"
  },
  "tangerine/node/3d/viewport_3d.html": {
    "href": "tangerine/node/3d/viewport_3d.html",
    "title": "Viewport3D | Citrus Engine",
    "keywords": "Viewport3D Viewport3D - вьюпорт для использования в трех измерениях (X/Y/Z). Является виджетом (т.е. использует его свойства) Свойства Viewport3D : Является Node3D Camera - выбор камеры по-умолчанию Frame - выбор фрейма, с которого начинается отображение"
  },
  "tangerine/node/3d/widget_adapter_3d.html": {
    "href": "tangerine/node/3d/widget_adapter_3d.html",
    "title": "WidgetAdapter3D | Citrus Engine",
    "keywords": "WidgetAdapter3D WidgetAdapter3D - используется для вставки 2D-виджетов с 3D-сцены Свойства WidgetAdapter3D : Является Node3D"
  },
  "tangerine/node/audio.html": {
    "href": "tangerine/node/audio.html",
    "title": "Audio | Citrus Engine",
    "keywords": "Audio Audio (аудиофайл) - используется для вставки звуков и музыки на сценах. Свойства Audio : Sample - путь до используемого семплa (обычно это *.ogg) Looping - вкл/выкл цикличность FadeTime - время затухания семпла Volume - громкость Pan - смещение звука относительно каналов (L/R) Pitch - регулировка тональности Action - проигрывать ли звук, либо остановить проигрывание (используется при анимации) Group - к какой группе (Effects/Music/Voice) относить данный аудиофайл Priority - выставить аудиофайлу приоритет Continuous - проигрывать ли звук до конца, даже если исходная сцена была закрыта"
  },
  "tangerine/node/bone.html": {
    "href": "tangerine/node/bone.html",
    "title": "Bones | Citrus Engine",
    "keywords": "Bones Bone (кости) используются для скелетной анимации. К костям могут быть привязаны виджеты ( Ctrl + T ) и другие кости. Свойства Bone : Position - положение кости на сцене Rotation - вращение костей относительно начальной точки Length - длина кости IKStopper - стоппер для инверсной кинематики (вкл/выкл) Index - индекс кости BaseIndex - базовый индекс кости EffectiveRadius - радиус, в пределах которого, все точки будут иметь максимальный вес FadeoutZone - радиус, в пределах которого, вес точек (кости) будет уменьшаться от центра RefPosition/RefRotation/RefLength - выставляется при кукинге, в редакторе не используется"
  },
  "tangerine/node/button.html": {
    "href": "tangerine/node/button.html",
    "title": "Button | Citrus Engine",
    "keywords": "Button Button (кнопка) работает аналогично Frame (является контейнером), за исключением того, что она может быть кликабельна. Свойства Button : Является виджетом Text - текстовая подпись к кнопке Enabled - вкл/выкл кнопку"
  },
  "tangerine/node/frame.html": {
    "href": "tangerine/node/frame.html",
    "title": "Frame | Citrus Engine",
    "keywords": "Frame Frame (группа) - используется как контейнер для других виджетов. Свойства Frame : Является виджетом ClipChildren - как поступать с контентом за пределами фрейма (обрезать/игнорировать) RenderTarget - рендерит фрейм в текстуру, согласно выбранному размеру. Затем эту текстуру можно использовать в полях Texture"
  },
  "tangerine/node/image/distortion_mesh.html": {
    "href": "tangerine/node/image/distortion_mesh.html",
    "title": "DistortionMesh | Citrus Engine",
    "keywords": "DistortionMesh DistortionMesh - используется для создания объекта \"DistortionMesh\". Представляет собой контейнер, наполненный точками (DistortionMeshPoints) Свойства DistortionMesh : Является виджетом NumCols - количество колонок NumRows - количество строк Texture - путь до используемой текстуры Свойства DistortionMeshPoint : Color - цвет точки UV - настройка UV-преобразования развертки текстуры (можно менять драгом через Ctrl ) Offset - настройка смещения"
  },
  "tangerine/node/image/image.html": {
    "href": "tangerine/node/image/image.html",
    "title": "Image | Citrus Engine",
    "keywords": "Image Image (изображение) - виджет для вставки изображения в сцену. Свойства Image : Является виджетом Texture - путь до отображаемой текстуры UV0/UV1 - настройка UV-преобразования развертки текстуры"
  },
  "tangerine/node/image/nine_grid.html": {
    "href": "tangerine/node/image/nine_grid.html",
    "title": "NineGrid | Citrus Engine",
    "keywords": "NineGrid NineGrid - используется для создания \"9-slicing sprites\" Свойства NineGrid : Является виджетом Texture - путь до используемой текстуры LeftOffset - смещение границы грида слева RightOffset - смещение границы грида справа TopOffset - смещение границы грида сверху BottomOffset - смещение границы грида снизу"
  },
  "tangerine/node/image/tiled_image.html": {
    "href": "tangerine/node/image/tiled_image.html",
    "title": "TiledImage | Citrus Engine",
    "keywords": "TiledImage TiledImage - используется для \"плиточных\" текстур Свойства TiledImage : Является виджетом Texture - путь до используемой текстуры TileRatio - количество строк/столбцов для создания тайлов TileOffset - смещение тайлов TileRounding - использовать только \"целые\" тайлы"
  },
  "tangerine/node/image_combiner.html": {
    "href": "tangerine/node/image_combiner.html",
    "title": "ImageCombiner | Citrus Engine",
    "keywords": "ImageCombiner ImageCombiner - используется для наложения маски на изображение (первое изображение является маской) Свойства ImageCombiner : Является виджетом Enabled - вкл/выкл комбайнер Blending - настройка смешивания Shader - настройка шейдера"
  },
  "tangerine/node/movie.html": {
    "href": "tangerine/node/movie.html",
    "title": "Movie | Citrus Engine",
    "keywords": "Movie Movie (видеофайл) используется для вставки видео в сцены Свойства Movie : Является виджетом Path - путь до используемого видеофайла (обычно это *.ogv) Looping - вкл/выкл цикличность FadeTime - время затухания семпла Action - проигрывать ли видео, поставить на паузу или остановить (используется при анимации)"
  },
  "tangerine/node/particles/emitter_shape_point.html": {
    "href": "tangerine/node/particles/emitter_shape_point.html",
    "title": "ParticleShapePoint | Citrus Engine",
    "keywords": "ParticleShapePoint ParticleShapePoint - элемент для контейнера частиц (ParticleEmitter), может использоваться только внутри контейнера. Используется для создания кастомной зоны распределения частиц. Имеет смысл только при Shape -> Custom. Свойства ParticleShapePoint : Position - позиция точки на экране"
  },
  "tangerine/node/particles/particle_emitter.html": {
    "href": "tangerine/node/particles/particle_emitter.html",
    "title": "ParticleEmitter | Citrus Engine",
    "keywords": "ParticleEmitter ParticleEmitter - контейнер для системы частиц Свойства ParticleEmitter : Является виджетом ImmortalParticles - генерировать частицы единожды и не уничтожать их (вкл/выкл) Shape - форма контейнера для частиц (Custom активируется автоматически при использовании EmitterShapePoint) EmissionType - тип излучения частиц (от центра/к центру) ParticlesLinkage - указать, куда привязывать контейнер частиц (root-сцена/текущий контейнер/другое) Number - количество сгенеренных частиц в секунду TimeShift - временной сдвиг (в секундах) Speed - скорость движения частиц AlongPathOrientation - включить ориентирование партиклей вдоль трека (сплайна/кривой) WindDirection - направление ветра в градусах (0 - дует слева, 90 - дует сверху) WindAmount - сила ветра GravityDirection - направление гравитации (0 - тянет направо, 90 - тянет вниз) GravityAmount - сила гравитации MagnetAmount - сила влияния магнитов на эмиттер Orientation - угол поворота созданных частиц Direction - угол поворота эмиттера (контейнера) частиц Lifetime - время жизни частиц в секундах Zoom - зум для созданных частиц AspectRatio - соотношение сторон для созданных частиц Velocity - угловая скорость частиц Spin - задать частицам угол вращения (в градусах) AngularVelocity - угловая скорость контейнера частиц (в градусах) RandomMotionRadius - радиус рандомного движения частиц RandomMotionSpeed - скорость рандомного движения частиц RandomMotionAspectRatio - соотношение сторон зоны движения частиц RandomMotionRotation - вращение рандомного движения частиц"
  },
  "tangerine/node/particles/particle_modifier.html": {
    "href": "tangerine/node/particles/particle_modifier.html",
    "title": "ParticleEmitter | Citrus Engine",
    "keywords": "ParticleEmitter ParticleModifier - элемент для контейнера частиц (ParticleEmitter), может использоваться только внутри контейнера. Свойства ParticleModifier : Size - размер частиц Scale - масштабирование частиц Velocity - скорость вылета частиц Spin - угол вращения частиц AngularVelocity - угловая скорость частиц GravityAmount - сила гравитации, действующая на частицы WindAmount - сила ветра, действующая на частицы MagnetAmount - сила магнита, действущая на частицы Color - цвет частиц FirstFrame - фрейм, с которого стартует генерация частиц LastFrame - фрейм, на котором заканчивается генерация частиц AnimationFps - количество кадров анимации частиц LoopedAnimation - признак зацикленности анимации Texture - путь до используемой текстуры"
  },
  "tangerine/node/particles/particles_magnet.html": {
    "href": "tangerine/node/particles/particles_magnet.html",
    "title": "ParticlesMagnet | Citrus Engine",
    "keywords": "ParticlesMagnet ParticlesMagnet - магнит для системы частиц Свойства ParticlesMagnet : Является виджетом Shape - форма области притяжения магнита Attenuation - коэффицицент затухания силы притяжения магнита Strength - сила магнита"
  },
  "tangerine/node/polyline/polyline.html": {
    "href": "tangerine/node/polyline/polyline.html",
    "title": "Polyline | Citrus Engine",
    "keywords": "Polyline Polyline - используется для создания кривой Свойства Polyline : Является виджетом Thickness - толщина линий StaticThickness - статическая толщина кривой Closed - замкнутость кривой (да/нет)"
  },
  "tangerine/node/polyline/polyline_point.html": {
    "href": "tangerine/node/polyline/polyline_point.html",
    "title": "PolylinePoint | Citrus Engine",
    "keywords": "PolylinePoint PolylinePoint - объект типа PointObject (точка), используется в контейнере Polyline Свойства PolylinePoint : Position - координаты точки"
  },
  "tangerine/node/slider.html": {
    "href": "tangerine/node/slider.html",
    "title": "Slider | Citrus Engine",
    "keywords": "Slider Slider - используется для создания слайдеров Свойства Slider : Является виджетом RangeMin - минимальное значение на шкале слайдера RangeMax - максимальное значение на шкале слайдера Value - значение по-умолчанию (текущее) Step - шаг (цена деления)"
  },
  "tangerine/node/spline/spline.html": {
    "href": "tangerine/node/spline/spline.html",
    "title": "Spline | Citrus Engine",
    "keywords": "Spline Spline (сплайн) - создает контейнер для объектов типа SplinePoint Свойства Spline : Является виджетом Closed - признак замкнутости сплайна"
  },
  "tangerine/node/spline/spline_gear.html": {
    "href": "tangerine/node/spline/spline_gear.html",
    "title": "SplineGear | Citrus Engine",
    "keywords": "SplineGear SplineGear - используется для создания связи между виджетом и сплайном (можно анимировать движение виджета по сплайну) Свойства SplineGear : Widget - Id виджета на сцене Spline - Id сплайна на сцене SplineOffset - смещение вдоль сплайна AlongPathOrientation - поворачивать виджет по направлению движения по сплайну"
  },
  "tangerine/node/spline/spline_point.html": {
    "href": "tangerine/node/spline/spline_point.html",
    "title": "SplinePoint | Citrus Engine",
    "keywords": "SplinePoint SplinePoint (точка сплайна) - создает контейнер для объектов типа SplinePoint Свойства SplinePoint : TangentAngle - угол касательной TangentWeight - вес касательной Straight - принадлежит ли точка прямой"
  },
  "tangerine/node/text/rich_text.html": {
    "href": "tangerine/node/text/rich_text.html",
    "title": "RichText | Citrus Engine",
    "keywords": "RichText RichText - создает виджет с текстом, поддерживающим стили (через bb-коды). Виджет является контейнером для стилей (TextStyle) Свойства RichText : Является виджетом Text - текст HAlignment - горизонтальное выравнивание VAlignment - вертикальное выравнивание OverflowMode - выбрать способ, как \"обрезать\" текст, если он не вмещается WordSplitAllowed - разрешать ли переносить слова"
  },
  "tangerine/node/text/simple_text.html": {
    "href": "tangerine/node/text/simple_text.html",
    "title": "SimpleText | Citrus Engine",
    "keywords": "SimpleText SimpleText - создает виджет с простым (неформатированным) текстом Свойства SimpleText : Является виджетом Font - выбор шрифта (по-умолчанию - Default/Labels/Text) Text - текст FontHeight - высота шрифта HAlignment - горизонтальное выравнивание VAlignment - вертикальное выравнивание OverflowMode - выбрать способ, как \"обрезать\" текст, если он не вмещается WordSplitAllowed - разрешать ли дробить слова на буквы при переносе TextColor - цвет текста GradienMapIndex - настройка заливки текста LetterSpacing - расстояние между буквами ForceUncutText - используется в Layouts , запрещает переносить текст"
  },
  "tangerine/node/text/text_style.html": {
    "href": "tangerine/node/text/text_style.html",
    "title": "TextStyle | Citrus Engine",
    "keywords": "TextStyle TextStyle - создает стиль для использования в RichText -контейнере. Свойства TextStyle : ImageTexture - путь до используемой текстуры ImageSize - размеры используемой текстуры ImageUsage - для какого типа используется текстура Font - шрифт Size - размер шрифта SpaceAfter - ??? Bold - признак жирности шрифта CastShadow - признак тени ShadowOffset - настройка смещения тени TextColor - цвет текста ShadowColor - цвет тени GradientMapIndex - настройка градиента LetterSpacing - межбуквенный интервал"
  },
  "tangerine/node/widget.html": {
    "href": "tangerine/node/widget.html",
    "title": "Widget | Citrus Engine",
    "keywords": "Widget Почти все объекты, используемые в сценах редактора, являются виджетами. Виджеты имеют одинаковые для всех типов свойства, объединённые в группу Widget: Position - позиция в координатах x/y на вьюпорте Scale - масштабирование по x/y Size - размер по x/y Pivot - координаты точки вращения относительно виджета Padding - отступы (используются исключительно в кастомном компоненте Layouts ) Color - цвет в формате RGB + настройка альфа-канала Anchors - настройка якорей Blending - настройка смещивания (используется вместе с шейдерами) Shader - наложенный на виджет шейдер Visible - флаг, используемый для отображения виджета (не только в редакторе, но и в коде) SkinningWeights - настройка веса виджета HitTestMethod - настройка хитбокса (Bounding Rect/Contents/Skip) Для некоторых виджетов (Model3D, Frame или Button) также доступно поле ContentsPath - что позволяет указать *.tan, который будет использоваться в качестве \"наполнителя\" для контейнера. Также для контейнеров доступно поле Trigger , которое фактически не используется в рабочих проектах (оно служит для отладки). Независимо от типа, у всех объектов имеется поле Id , определяющее имя объекта. У каждого виджета также есть свои собственные свойства, весь список виджетов можно посмотреть здесь ."
  },
  "tangerine/prefs.html": {
    "href": "tangerine/prefs.html",
    "title": "Настройки (Preferences) | Citrus Engine",
    "keywords": "Настройки (Preferences) Настройки редактора вызываются через File -> Preferences , либо использовав комбинацию клавиш Ctrl + P. Окно настроек делится на несколько категорий: General - основные настройки. Target platform - выбор платформы, с которой работаем. Reload modified files - перегружать ли измененные файлы по-умолчанию. Default scene dimensions - размеры сцены по-умолчанию. Automatic keyframes - выставлять ли ключи анимации при изменении пропертей. Animation mode - активировать ли триггеры при проигрывании анимации. Autosave delay - период сохранения сейвов. Stop animation on current frame - останавливать анимацию на текущем фрейме (вкл/выкл). Show scene thumbnail - показывать ли превью сцены на таймлайне. Don't paste at mouse pointer - отключить вставку на место курсора. Inverse Shift behavior when dragging keyframe - инвертировать поведение Shift при перетаскивании кейфреймов. Bone Width - настроить ширину кости. Default interpolation - выбор способа интерполяции по-умолчанию. Appearance - настройки внешнего вида. Chess background - использовать ли шахматки для фона. Background color A - цвет бэкграунда А. Background color B - цвет бэкграунда Б. Root overlay color - цвет границы root-сцены. Animation preview background - цвет фона для плеера анимаций. Theme - настройки цветовой схемы. Dark icon theme - использовать ли тёмные иконки. Dark/Light preset - захардкоженные дефолтные темы (тёмные/светлые). Save theme - сохранить тему. Load theme - загрузить тему. Search - поиск нужного проперти для изменения цвета. Keyboard shortcuts - настройки хоткеев. Profile - текущий пресет (профиль) настроек клавиатуры. Commands - список команд, доступных для биндов. Export/Import/Delete - управление профилем. Search - поиск по командам. Reset To Defaults - сбросить настройки по-умолчанию. Toolbar - настройка тулбаров. Search - поиск необходимой команды. Available commands - список доступных команд. Used commands - список использованных команд."
  },
  "tangerine/timeline.html": {
    "href": "tangerine/timeline.html",
    "title": "Окно \"Timeline\" | Citrus Engine",
    "keywords": "Окно \"Timeline\" Окно таймлайна служит для отображения кадров и маркеров в хронологическом порядке. Оно состоит из ленты превью, панели инструментов, списка виджетов и хронологической ленты. На превью можно видеть весь таймлайн целиком и передвигать рабочую область, драгая и перемещая её влево или вправо. Также, на Alt + Mousewheel есть возможность выставить зум так, как удобно. Панель инструментов состоит из нескольких элементов: Animation mode - режим анимации, при котором редактор будет заходить во все вложенные анимации Automatic keyframes - режим автоматического расставления ключей анимации Create folder - создать папку Edit curves - режим отображения кривых (WIP) Animation stretch mode - режим \"растягивания\" анимации, при котором можно увеличить или уменьшить проигрываемую анимацию по времени, просто потянув за ее края временного промежутка Slow motion mode ~ - режим замедления времени, замедляется на x0.10 раз Col: N - индикатор текущего столбца Exit current container Backspace - выходит из текущего контейнера Lock animation - блокирует проигрывание анимации для выбранного виджета Show Node - отображение виджетов на Viewport (Shown/Hidden), при клике через Shift изменяет параметр только для выбранных виджетов Lock Node - блокирует виджет, не давая вносить в него какие-либо изменения Список виджетов используется для навигации по всем виджетам, используемым в сцене По ПКМ с виджетами доступны действия: Copy/Cut/Paste/Delete - копировать/вырезать/вставить/удалить виджеты Rename - переименовать виджет Color mark - выставляет \"цвет\" виджету, используется только для цветовой дифференциации внутри редактора Convert to Button - конвертирует виджет в кнопку (работает только для объектов типа Frame) Также по Shift + Space на виджете (или кликнув на значок выпадающего списка слева) можно раскрыть список аниматоров, используемых в виджете. Для аниматоров доступны операции Copy/Cut/Paste/Delete Хронологическая лента отображает анимации покадрово, также она используется для того, чтобы производить действия с кейфреймами и анимациями: Cut Keyframes Ctrl + Alt + X - вырезать выделенные кейфреймы (со всеми ключами анимации) Copy Keyframes Ctrl + Alt + C - копировать выделенные кейфреймы Paste Keyframes Ctrl + Alt + V - вставить выделенные/скопированные кейфреймы в выбранный кадр. Если у виджета отсутствует какое-то анимированное свойство, оно будет игнорироваться. Reverse Keyframes - \"переворачивает\" анимацию на выбранном временном отрезке. Т.е. если виджет двигался из A -> B, то станет двигаться из B -> A и так далее. Insert Timeline Column Ctrl + Q - вставить колонку на таймлайне Remove Timeline Column Ctrl + W - удалить колонку на таймлайне. При этом, если колонка содержала ключи анимации, они будут смещены влево Delete Selected Keyframes Ctrl + Del - удалить выделенные кейфреймы Numeric Move - смещение выбранного участка таймлайна на N кадров вправо. При вводе отрицательного значения - влево Numeric Scale - масштабирование выбранного участка таймлайна, используя множитель Даблкликом на таймлайне создаются маркеры. Также их можно создать, используя горячие клавиши ( Alt + 1/2/3 ) Окно создания маркера выглядит так: Marker Id - идентификатор (имя) маркера Action - действие, которые будет выполняться, когда каретка достигнет маркера (Play/Jump/Stop) Jump to - маркер, на который будет \"прыгать\" каретка при достижении маркера, если выбран маркер типа \"Jump\""
  },
  "tangerine/toolbar.html": {
    "href": "tangerine/toolbar.html",
    "title": "Панель инструментов (Toolbar) | Citrus Engine",
    "keywords": "Панель инструментов (Toolbar) Панель инструментов частично копирует функционал из панели меню и разделена на 3 панели: Панель History - работа с историей изменений сцены: Undo - откатить изменения Redo - отменить откат последнего изменения Revert - восстановить виджет/сцену до первоначального вида Панель Create - дублирует функционал меню \"Create\" Панель Tools - содержит функционал для управления виджетами на сцене: Align Left - выравнивание по левому краю Align Right - выравнивание по правому краю Align Top - выравнивание по верхнему краю Align Bottom - выравнивание по нижнему краю Сenter Horizontally - отцентрировать горизонтально Center Vertically - отцентрировать вертикально Align to Parent/Root - выбрать, относительно чего (родителя или root-сцены) использовать центровку Align Centers Horizontally - выровнять центры горизонтально Align Centers Vertically - выровнять центры вертикально Distribute Left - распределение по левому краю Distribute Horizontally - горизонтальное распределение Distribute Right - распределение по правому краю Distribute Top - распределение по верхнему краю Distribute Vertically - вертикальное распределение Distribute Bottom - распределение по нижнему краю Align to Selection/Root/Parent - выбрать, относительно чего (выделения, root-cцены или родителя), использовать выравнивание Restore Original Size - восстановить изначальный размер виджета Reset Scale - восстановить изначальный масштаб виджета Reset Rotation - восстановить изначальный угол поворота виджета Flip Horizontally - перевернуть виджет по горизонтали Flip Vertically - перевернуть виджет по вертикали Fit to Container - изменить размер виджета по размеру контейнера (в котором он находится) Fit to Content - изменить размер виджета по содержимому контейнера Center View - центрироваться в Viewport на выбранном виджете"
  },
  "tangerine/ui.html": {
    "href": "tangerine/ui.html",
    "title": "Пользовательский интерфейс (UI) | Citrus Engine",
    "keywords": "Пользовательский интерфейс (UI) Главное окно Tangerine Заголовок окна - показывает имя открытого проекта и название редактора. Панель меню - служит для отображения меню редактора. Панель инструментов - служит для отображения доступных инструментов редактора. Окно \"Timeline\" - служит для отображения временной шкалы с кадрами и ключами анимации. Окно \"Inspector\" - служит для отображения свойств выбранного объекта (ноды/виджета), с возможностью редактирования этих свойств. Окно \"Viewport\" - служит для отображения текущей сцены. Всегда должно иметь как минимум 1 вкладку для отображения. Снизу находится статусбар, который, пока что, содержит в себе только ползунок с зумом. Окно \"Filesystem\" - файлменеджер для текущего проекта (и не только). Используется для навигации по файлам. Окно \"Hierarchy\" - дерево и поиск объектов на сцене Окно \"Backups\" - управление бекапами сцены Окно \"Console\" - используется для отображения различной технической информации и вывода ошибок. Окно \"Model3D Attachment\" - используется для настройки 3d-моделей. (по-умолчанию скрыто, вызывается через View -> Panels -> Model3D Attachment. Имеет смысл при работе с Model3D)"
  },
  "tangerine/viewport.html": {
    "href": "tangerine/viewport.html",
    "title": "Окно \"Viewport\" | Citrus Engine",
    "keywords": "Окно \"Viewport\" Окно \"Viewport\" служит для отображения текущей сцены. Рабочая область состоит из вкладок, которые соответствуют открытым сценам. Звездочка возле названия вкладки означает, что в сцене есть несохраненные изменения. В рабочей области есть отображение различного вида линеек и границ. Они дифференциируются цветом: Размеры и границы текущего контейнера (синие) Сохраненные пользовательские границы/линейки (вызванные View -> Rulers) (бирюзовые) Несохраненные пользовательские границы/линейки (сохранить можно в View -> Rulers) (фиолетовые) Линейки по краям экрана можно отключить сочетанием клавиш Ctrl + Alt + R В окно Viewport работает drag & drop для текстур, что позволяет создавать \"на лету\" Image , Tiled Image , Distortion Mesh , Nine Grid Снизу окна вьюпорта есть строка статуса, где можно изменять отзум на активной сцене и вкл/выкл. панель Visual Hints."
  },
  "tangerine/visual_hints.html": {
    "href": "tangerine/visual_hints.html",
    "title": "Окно \"Visual Hints\" | Citrus Engine",
    "keywords": "Окно \"Visual Hints\" Окно \"Visual Hints\" служит для настройки отображения на текущей сцене. По-умолчанию выключен, поэтому при необходимости его надо включить в View -> Pads -> Visual Hints Помимо пивотов здесь можно выключить сетку для Distortion Mesh и отображение направлений анимаций (Animation Path)"
  }
}